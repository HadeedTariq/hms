{"version":3,"sources":["../src/common/utils/envConfig.ts","../src/server.ts","../src/api-docs/openAPIRouter.ts","../src/api-docs/openAPIDocumentGenerator.ts","../src/api/healthCheck/healthCheckRouter.ts","../src/api-docs/openAPIResponseBuilders.ts","../src/common/models/serviceResponse.ts","../src/common/utils/httpHandlers.ts","../src/common/middleware/errorHandler.ts","../src/common/middleware/requestLogger.ts","../src/routes/auth/auth.routes.ts","../src/db/connect.ts","../src/routes/auth/auth.controller.ts","../src/queues/emailQueue.ts","../src/utils/asyncHandler.ts","../src/routes/middleware.ts","../src/routes/profile/profile.routes.ts","../src/routes/profile/profile.controller.ts","../src/routes/posts/posts.routes.ts","../src/routes/posts/posts.controller.ts","../src/routes/squads/squad.routes.ts","../src/routes/squads/squads.controller.ts","../src/routes/squads/squads.middleware.ts","../src/routes/followers/followers.routes.ts","../src/routes/followers/followers.controller.ts","../src/index.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly, url } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n  NODE_ENV: str({\n    devDefault: testOnly(\"test\"),\n    choices: [\"development\", \"production\", \"test\"],\n  }),\n  HOST: host({ devDefault: testOnly(\"localhost\") }),\n  PORT: port({ devDefault: testOnly(3000) }),\n  CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:5173\") }),\n  SERVER_DOMAIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n  DATABASE_URL: url({ devDefault: testOnly(\"http://localhost:3000\") }),\n  REDIS_URL: url({ devDefault: testOnly(\"http://localhost:5173\") }),\n  DATABASE_HOST: host({ devDefault: testOnly(\"localhost\") }),\n  DATABASE_PORT: port({ devDefault: testOnly(3000) }),\n  DATABASE_USER: str({ devDefault: testOnly(\"user\") }),\n  DATABASE_PASSWORD: str({ devDefault: testOnly(\"password\") }),\n  PASSWORD_SALT: str({ devDefault: testOnly(\"salt\") }),\n  JWT_SECRET: str({ devDefault: testOnly(\"secret\") }),\n  JWT_REFRESH_TOKEN_SECRET: str({ devDefault: testOnly(\"secret\") }),\n  JWT_ACCESS_TOKEN_SECRET: str({ devDefault: testOnly(\"secret\") }),\n  GITHUB_CLIENT_ID: str({ devDefault: testOnly(\"secret\") }),\n  GITHUB_CLIENT_SECRET: str({ devDefault: testOnly(\"secret\") }),\n  NODE_MAILER_USER: str({ devDefault: testOnly(\"user\") }),\n  SESSION_SECRET: str({ devDefault: testOnly(\"user\") }),\n  NODE_MAILER_PASSWORD: str({ devDefault: testOnly(\"password\") }),\n});\n","import cors from \"cors\";\nimport express, { type Express } from \"express\";\nimport helmet from \"helmet\";\nimport { pino } from \"pino\";\n\nimport { openAPIRouter } from \"@/api-docs/openAPIRouter\";\nimport errorHandler, {\n  reqErrorHandler,\n} from \"@/common/middleware/errorHandler\";\nimport requestLogger from \"./common/middleware/requestLogger\";\nimport { authRouter } from \"./routes/auth/auth.routes\";\n\nimport cookieParser from \"cookie-parser\";\n\nimport session from \"express-session\";\n\nimport { env } from \"./common/utils/envConfig\";\nimport passport from \"passport\";\nimport {\n  Strategy as GitHubStrategy,\n  Profile as GitHubProfile,\n} from \"passport-github2\";\nimport { profileRouter } from \"./routes/profile/profile.routes\";\nimport { postRouter } from \"./routes/posts/posts.routes\";\nimport { squadRouter } from \"./routes/squads/squad.routes\";\n\nimport { followersRouter } from \"./routes/followers/followers.routes\";\n\nconst logger = pino({ name: \"server start\" });\n\nconst app: Express = express();\n\n// Set the application to trust the reverse proxy\napp.set(\"trust proxy\", true);\napp.use(cookieParser());\n\n// Middlewares\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(\n  cors({\n    origin: [\"http://localhost:5173\", \"https://daily-dev-client.vercel.app\"],\n    credentials: true,\n    exposedHeaders: [\"Set-Cookie\"],\n  })\n);\napp.use(helmet());\napp.use(\n  session({\n    secret: env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n  })\n);\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Use GitHub Strategy\npassport.use(\n  new GitHubStrategy(\n    {\n      clientID: env.GITHUB_CLIENT_ID,\n      clientSecret: env.GITHUB_CLIENT_SECRET,\n      callbackURL: \"https://dailydev-backend.vercel.app/auth/github/callback\",\n    },\n    (\n      accessToken: string,\n      refreshToken: string,\n      profile: GitHubProfile,\n      done: (err: any, user?: User | false) => void\n    ) => {\n      const user: User = {\n        id: profile.id.toString(),\n        username: profile.username || \"\",\n        name: profile.displayName || \"\",\n        email: profile.emails?.map((email: any) => email.value)[0] as string,\n        avatar: profile.photos ? profile.photos[0].value : \"\",\n      };\n      return done(null, user);\n    }\n  )\n);\n\npassport.serializeUser(((user: User, done: (err: any, user?: User) => void) => {\n  done(null, user);\n}) as any);\n\npassport.deserializeUser(\n  (user: User, done: (err: any, user?: User | null) => void) => {\n    done(null, user);\n  }\n);\n\n// Request logging\napp.use(requestLogger);\n\n// Routes\napp.use(\"/auth\", authRouter);\napp.use(\"/profile\", profileRouter);\napp.use(\"/posts\", postRouter);\napp.use(\"/squad\", squadRouter);\napp.use(\"/follower\", followersRouter);\n// Swagger UI\napp.use(openAPIRouter);\n\n// Error handlers\napp.use(errorHandler());\napp.use(reqErrorHandler);\n\nexport { app, logger };\n","import express, { type Request, type Response, type Router } from \"express\";\nimport swaggerUi from \"swagger-ui-express\";\n\nimport { generateOpenAPIDocument } from \"@/api-docs/openAPIDocumentGenerator\";\n\nexport const openAPIRouter: Router = express.Router();\nconst openAPIDocument = generateOpenAPIDocument();\n\nopenAPIRouter.get(\"/swagger.json\", (_req: Request, res: Response) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.send(openAPIDocument);\n});\n\nopenAPIRouter.use(\"/\", swaggerUi.serve, swaggerUi.setup(openAPIDocument));\n","import {\n  OpenAPIRegistry,\n  OpenApiGeneratorV3,\n} from \"@asteasolutions/zod-to-openapi\";\n\nimport { healthCheckRegistry } from \"@/api/healthCheck/healthCheckRouter\";\n\nexport function generateOpenAPIDocument() {\n  const registry = new OpenAPIRegistry([healthCheckRegistry]);\n  const generator = new OpenApiGeneratorV3(registry.definitions);\n\n  return generator.generateDocument({\n    openapi: \"3.0.0\",\n    info: {\n      version: \"1.0.0\",\n      title: \"Daily Dev Clone API\",\n    },\n  });\n}\n","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Request, type Response, type Router } from \"express\";\nimport { z } from \"zod\";\n\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { handleServiceResponse } from \"@/common/utils/httpHandlers\";\n\nexport const healthCheckRegistry = new OpenAPIRegistry();\nexport const healthCheckRouter: Router = express.Router();\n\nhealthCheckRegistry.registerPath({\n  method: \"get\",\n  path: \"/health-check\",\n  tags: [\"Health Check\"],\n  responses: createApiResponse(z.null(), \"Success\"),\n});\n\nhealthCheckRouter.get(\"/\", (_req: Request, res: Response) => {\n  const serviceResponse = ServiceResponse.success(\"Service is healthy\", null);\n  return handleServiceResponse(serviceResponse, res);\n});\n","import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/common/models/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n  return {\n    [statusCode]: {\n      description,\n      content: {\n        \"application/json\": {\n          schema: ServiceResponseSchema(schema),\n        },\n      },\n    },\n  };\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n    return new ServiceResponse(true, message, responseObject, statusCode);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n    return new ServiceResponse(false, message, responseObject, statusCode);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n  try {\n    schema.parse({ body: req.body, query: req.query, params: req.params });\n    next();\n  } catch (err) {\n    const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n    const statusCode = StatusCodes.BAD_REQUEST;\n    const serviceResponse = ServiceResponse.failure(errorMessage, null, statusCode);\n    return handleServiceResponse(serviceResponse, res);\n  }\n};\n","import type { ErrorRequestHandler, RequestHandler } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nconst unexpectedRequest: RequestHandler = (_req, res) => {\n  res.sendStatus(StatusCodes.NOT_FOUND);\n};\n\nconst addErrorToRequestLog: ErrorRequestHandler = (err, _req, res, next) => {\n  res.locals.err = err;\n  next(err);\n};\n\nexport const reqErrorHandler: ErrorRequestHandler = (err, _req, res, next) => {\n  const status = err.status || 500;\n  const message = err.message || \"Something went wrong\";\n  return res.status(status).json({ message });\n};\n\nexport default () => [unexpectedRequest, addErrorToRequestLog];\n","import { randomUUID } from \"node:crypto\";\nimport type { IncomingMessage, ServerResponse } from \"node:http\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { StatusCodes, getReasonPhrase } from \"http-status-codes\";\nimport type { LevelWithSilent } from \"pino\";\nimport { type CustomAttributeKeys, type Options, pinoHttp } from \"pino-http\";\n\nimport { env } from \"@/common/utils/envConfig\";\n\nenum LogLevel {\n  Fatal = \"fatal\",\n  Error = \"error\",\n  Warn = \"warn\",\n  Info = \"info\",\n  Debug = \"debug\",\n  Trace = \"trace\",\n  Silent = \"silent\",\n}\n\ntype PinoCustomProps = {\n  request: Request;\n  response: Response;\n  error: Error;\n  responseBody: unknown;\n};\n\nconst requestLogger = (options?: Options): RequestHandler[] => {\n  const pinoOptions: Options = {\n    enabled: env.isProduction,\n    customProps: customProps as unknown as Options[\"customProps\"],\n    redact: [],\n    genReqId,\n    customLogLevel,\n    customSuccessMessage,\n    customReceivedMessage: (req) => `request received: ${req.method}`,\n    customErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\n    customAttributeKeys,\n    ...options,\n  };\n  return [responseBodyMiddleware, pinoHttp(pinoOptions)];\n};\n\nconst customAttributeKeys: CustomAttributeKeys = {\n  req: \"request\",\n  res: \"response\",\n  err: \"error\",\n  responseTime: \"timeTaken\",\n};\n\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\n  request: req,\n  response: res,\n  error: res.locals.err,\n  responseBody: res.locals.responseBody,\n});\n\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\n  const isNotProduction = !env.isProduction;\n  if (isNotProduction) {\n    const originalSend = res.send;\n    res.send = (content) => {\n      res.locals.responseBody = content;\n      res.send = originalSend;\n      return originalSend.call(res, content);\n    };\n  }\n  next();\n};\n\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\n  if (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\n  if (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\n  if (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\n  return LogLevel.Info;\n};\n\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  if (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\n  return `${req.method} completed`;\n};\n\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  const existingID = req.id ?? req.headers[\"x-request-id\"];\n  if (existingID) return existingID;\n  const id = randomUUID();\n  res.setHeader(\"X-Request-Id\", id);\n  return id;\n};\n\nexport default requestLogger();\n","import { Router } from \"express\";\nimport { userController } from \"./auth.controller\";\nimport { asyncHandler } from \"@/utils/asyncHandler\";\nimport passport from \"passport\";\nimport { checkAuth } from \"../middleware\";\n\nconst router = Router();\n\nrouter.get(\"/\", checkAuth, asyncHandler(userController.authenticateUser));\nrouter.post(\"/verification\", asyncHandler(userController.registerUser));\nrouter.get(\"/register\", asyncHandler(userController.createUser));\nrouter.post(\"/login\", asyncHandler(userController.loginUser));\nrouter.post(\"/logout\", asyncHandler(userController.logoutUser));\nrouter.post(\n  \"/refreshAccessToken\",\n  asyncHandler(userController.authenticateByResfreshToken)\n);\nrouter.get(\n  \"/github\",\n  passport.authenticate(\"github\", { scope: [\"user:email\"] })\n);\nrouter.get(\n  \"/github/callback\",\n  passport.authenticate(\"github\", { failureRedirect: \"/\" }),\n  asyncHandler(userController.authenticate_github)\n);\n\nexport { router as authRouter };\n","import { env } from \"@/common/utils/envConfig\";\nimport Redis from \"ioredis\";\nimport { Pool } from \"pg\";\n\nexport const redis = new Redis(env.REDIS_URL);\n\nexport const pool = new Pool({\n  user: env.DATABASE_USER,\n  password: env.DATABASE_PASSWORD,\n  host: env.DATABASE_HOST,\n  port: env.DATABASE_PORT,\n  database: \"defaultdb\",\n  ssl: {\n    rejectUnauthorized: false,\n  },\n});\n\nexport const queryDb = async (query: string, params: any[] = []) => {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(query, params);\n    return result;\n  } finally {\n    client.release();\n  }\n};\n\nexport const deleteUnverifiedUsers = async () => {\n  try {\n    // const query = `\n    //   DELETE FROM users\n    //   WHERE created_at < NOW() - INTERVAL '24 hours'\n    //   AND is_verified = false;\n    // `;\n    const query = `\n      DELETE FROM users\n      WHERE email = $1;\n    `;\n    const result = await queryDb(query, [\"hadeedtariq12@gmail.com\"]);\n    console.log(`Deleted ${result.rowCount} unverified users.`);\n  } catch (error) {\n    console.error(\"Error deleting unverified users:\", error);\n  }\n};\n\nexport const runIndependentTransaction = async (\n  queries: {\n    query: string;\n    params: any[];\n  }[]\n) => {\n  const client = await pool.connect();\n\n  try {\n    await client.query(\"BEGIN\");\n\n    await Promise.all(queries.map((q) => client.query(q.query, q.params)));\n\n    await client.query(\"COMMIT\");\n    console.log(\"Transaction committed successfully\");\n  } catch (error) {\n    await client.query(\"ROLLBACK\");\n    console.error(\"Transaction failed and rolled back:\", error);\n    throw error;\n  } finally {\n    client.release();\n    console.log(\"Database client released\");\n  }\n};\n","import { pool, queryDb, runIndependentTransaction } from \"@/db/connect\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { sign, verify } from \"jsonwebtoken\";\nimport { DatabaseError } from \"pg\";\nimport { createCipheriv, createDecipheriv } from \"crypto\";\nimport { env } from \"@/common/utils/envConfig\";\nimport nodeMailer from \"nodemailer\";\nimport { hash, compare } from \"bcrypt\";\nimport { addEmailJob } from \"@/queues/emailQueue\";\n\nclass UserController {\n  constructor() {\n    this.registerUser = this.registerUser.bind(this);\n    this.createUser = this.createUser.bind(this);\n    this.loginUser = this.loginUser.bind(this);\n    this.authenticateUser = this.authenticateUser.bind(this);\n    this.authenticateByResfreshToken =\n      this.authenticateByResfreshToken.bind(this);\n    this.authenticate_github = this.authenticate_github.bind(this);\n  }\n  async createUser(req: Request, res: Response, next: NextFunction) {\n    const { token } = req.query;\n\n    if (!token) {\n      return next({ message: \"Token is required\", status: 404 });\n    }\n    try {\n      const { rows } = await queryDb(\n        `SELECT email FROM magicLinks WHERE token = $1`,\n        [token]\n      );\n      if (rows.length < 1) {\n        return next({ status: 404, message: \"Invalid token\" });\n      }\n\n      const decryptedToken = this.decryptToken(token as string);\n      const user: any = verify(decryptedToken, env.JWT_SECRET);\n\n      if (user.email !== rows[0].email) {\n        return next({ status: 404, message: \"Incorrect Token\" });\n      }\n\n      const client = await pool.connect();\n\n      try {\n        await client.query(\"BEGIN\");\n\n        const { rows: userRow } = await client.query(\n          `UPDATE users SET is_verified = $1 WHERE email = $2 RETURNING id`,\n          [true, user.email]\n        );\n\n        if (userRow.length < 1) {\n          throw new Error(\"User not found or already verified\");\n        }\n\n        const userId = userRow[0].id;\n\n        const queries = [\n          {\n            query: `DELETE FROM magicLinks WHERE email = $1`,\n            params: [user.email],\n          },\n          {\n            query: `INSERT INTO about (user_id, bio, company, job_title) VALUES ($1, '', '', '')`,\n            params: [userId],\n          },\n          {\n            query: `INSERT INTO social_links (user_id) VALUES ($1)`,\n            params: [userId],\n          },\n          {\n            query: `INSERT INTO user_stats (user_id, followers, following, reputation, views, upvotes)\n                    VALUES ($1, 0, 0, 0, 0, 0)`,\n            params: [userId],\n          },\n          {\n            query: `INSERT INTO streaks (user_id) VALUES ($1)`,\n            params: [userId],\n          },\n        ];\n\n        await Promise.all(queries.map((q) => client.query(q.query, q.params)));\n\n        await client.query(\"COMMIT\");\n        res.status(201).json({ message: \"User registered successfully\" });\n      } catch (error) {\n        await client.query(\"ROLLBACK\");\n        console.error(\"Transaction failed:\", error);\n        return next({ status: 500, message: \"Internal Server Error\" });\n      } finally {\n        client.release();\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      return next({ status: 500, message: \"Internal Server Error\" });\n    }\n  }\n\n  async loginUser(req: Request, res: Response, next: NextFunction) {\n    const { email, password } = req.body;\n    if (!email || !password) {\n      return next({ status: 404, message: \"Please fill all the fields\" });\n    }\n    const { rows } = await queryDb(\n      `SELECT \n        id,\n        name,\n        username,\n        avatar,\n        email,\n        user_password,\n        profession\n       from users where email = $1 and is_verified = $2`,\n      [email, true]\n    );\n\n    if (rows.length < 1) {\n      return next({ message: \"User not found\", status: 404 });\n    }\n\n    const is_correct_password = await this.verifyPassword(\n      password,\n      rows[0].user_password\n    );\n\n    if (!is_correct_password) {\n      return next({ message: \"Incorrect Credentials\", status: 404 });\n    }\n    const { accessToken, refreshToken } = this.generateAccessAndRefreshToken(\n      rows[0]\n    );\n\n    await queryDb(\"update users set refresh_token = $1 where email = $2\", [\n      refreshToken,\n      email,\n    ]);\n\n    res\n      .cookie(\"accessToken\", accessToken, {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      })\n      .cookie(\"refreshToken\", refreshToken, {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      });\n\n    res.status(200).json({ message: \"User logged in successfully\" });\n  }\n\n  async registerUser(req: Request, res: Response, next: NextFunction) {\n    const { name, username, profession, email, password } = req.body;\n    if (!username || !name || !profession || !email || !password) {\n      return next({ message: \"Please fill all the fields\", status: 404 });\n    }\n    const user = await queryDb(`select email from users where email=$1`, [\n      email,\n    ]);\n    if (user.rowCount && user.rowCount > 0) {\n      return next({ message: \"User already exist\", status: 404 });\n    }\n\n    const expiresIn = \"1d\";\n    const dataStoredInToken = {\n      name,\n      username,\n      profession,\n      email,\n    };\n\n    const signedToken = sign(dataStoredInToken, env.JWT_SECRET, { expiresIn });\n    const token = this.encryptToken(signedToken);\n\n    const magicLink = `${env.SERVER_DOMAIN}/auth/register?token=${token}`;\n    const hashPassword = await this.hashPassword(password);\n\n    try {\n      await runIndependentTransaction([\n        {\n          query: `INSERT INTO magicLinks (email, token) VALUES ($1, $2)`,\n          params: [email, token],\n        },\n        {\n          query: `INSERT INTO users (name, username, profession, email, user_password) VALUES ($1, $2, $3, $4, $5)`,\n          params: [\n            name,\n            username.split(\" \").join(\"-\"),\n            profession,\n            email,\n            hashPassword,\n          ],\n        },\n      ]);\n    } catch (error) {\n      return next({\n        message: \"Already sent verification email or failed to create user\",\n        status: 400,\n      });\n    }\n\n    await addEmailJob(email, magicLink);\n\n    return res.status(200).json({ message: \"Verification email sent soon\" });\n  }\n\n  async authenticate_github(req: Request, res: Response, next: NextFunction) {\n    const user = req.user as User;\n    if (!user?.email) {\n      return next({\n        message:\n          \"We couldn’t retrieve your email from GitHub. To continue, please make your email public or provide an alternative email address in github\",\n        status: 404,\n      });\n    }\n    const { rows, rowCount } = await queryDb(\n      `select * from users where email=$1`,\n      [user.email]\n    );\n    if (rowCount && rowCount > 0) {\n      if (rows[0].is_verified) {\n        const { accessToken, refreshToken } =\n          this.generateAccessAndRefreshToken(rows[0]);\n\n        await queryDb(\"update users set refresh_token = $1 where email = $2\", [\n          refreshToken,\n          user.email,\n        ]);\n\n        return res\n          .cookie(\"accessToken\", accessToken, {\n            secure: true,\n            httpOnly: false,\n            sameSite: \"none\",\n          })\n          .cookie(\"refreshToken\", refreshToken, {\n            secure: true,\n            httpOnly: false,\n            sameSite: \"none\",\n          })\n          .redirect(env.CORS_ORIGIN);\n      } else {\n        const { accessToken, refreshToken } =\n          this.generateAccessAndRefreshToken(rows[0]);\n\n        await queryDb(\n          \"update users set refresh_token = $1,is_verified=$2 where email = $3\",\n          [refreshToken, true, user.email]\n        );\n\n        return res\n          .cookie(\"accessToken\", accessToken, {\n            secure: true,\n            httpOnly: false,\n            sameSite: \"none\",\n          })\n          .cookie(\"refreshToken\", refreshToken, {\n            secure: true,\n            httpOnly: false,\n            sameSite: \"none\",\n          })\n          .redirect(env.CORS_ORIGIN);\n      }\n    }\n    const client = await pool.connect();\n\n    try {\n      await client.query(\"BEGIN\");\n\n      const { rows: authUser } = await client.query(\n        \"INSERT INTO users (name, username, email, avatar, is_verified) VALUES ($1, $2, $3, $4, $5) RETURNING id\",\n        [\n          user.name,\n          user.username.split(\" \").join(\"-\"),\n          user.email,\n          user.avatar,\n          true,\n        ]\n      );\n\n      user.id = authUser[0].id;\n\n      const { accessToken, refreshToken } =\n        this.generateAccessAndRefreshToken(user);\n\n      const queries = [\n        {\n          query: `UPDATE users SET refresh_token = $1 WHERE email = $2`,\n          params: [refreshToken, user.email],\n        },\n        {\n          query: `INSERT INTO about (user_id, bio, company, job_title) VALUES ($1, '', '', '')`,\n          params: [user.id],\n        },\n        {\n          query: `INSERT INTO social_links (user_id, github) VALUES ($1, $2)`,\n          params: [user.id, `https://github.com/${user.username}`],\n        },\n        {\n          query: `INSERT INTO user_stats (user_id, followers, following, reputation, views, upvotes)\n                  VALUES ($1, 0, 0, 0, 0, 0)`,\n          params: [user.id],\n        },\n        {\n          query: `INSERT INTO streaks (user_id) VALUES ($1)`,\n          params: [user.id],\n        },\n      ];\n\n      await Promise.all(queries.map((q) => client.query(q.query, q.params)));\n\n      await client.query(\"COMMIT\");\n\n      return res\n        .cookie(\"accessToken\", accessToken, {\n          secure: true,\n          httpOnly: false,\n          sameSite: \"none\",\n        })\n        .cookie(\"refreshToken\", refreshToken, {\n          secure: true,\n          httpOnly: false,\n          sameSite: \"none\",\n        })\n        .redirect(env.CORS_ORIGIN);\n    } catch (error) {\n      await client.query(\"ROLLBACK\");\n      console.error(\"Transaction failed:\", error);\n      return res.status(500).json({ message: \"Internal server error\" });\n    } finally {\n      client.release();\n      console.log(\"Database client released\");\n    }\n  }\n\n  authenticateUser(req: Request, res: Response, next: NextFunction) {\n    const { user } = req.body;\n\n    return res.status(200).json(user);\n  }\n\n  async authenticateByResfreshToken(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { refreshToken: refToken } = req.cookies;\n    if (!refToken) {\n      return next({ message: \"Refresh Token not found\", status: 404 });\n    }\n    const { id }: any = verify(refToken, env.JWT_REFRESH_TOKEN_SECRET!);\n    if (!id) {\n      return next({ message: \"Invalid Refresh Token\", status: 404 });\n    }\n\n    const { rows } = await queryDb(`SELECT * from users where id = $1`, [id]);\n\n    if (rows.length < 1) {\n      return next({ status: 404, message: \"User not found\" });\n    }\n\n    const { accessToken, refreshToken } = this.generateAccessAndRefreshToken(\n      rows[0]\n    );\n    await queryDb(`update users set refresh_token=$1 where email=$2`, [\n      refreshToken,\n      rows[0].email,\n    ]);\n\n    res\n      .cookie(\"accessToken\", accessToken, {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      })\n      .cookie(\"refreshToken\", refreshToken, {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      });\n\n    return res\n      .status(200)\n      .json({ message: \"User logged in by using refreshToken successfully\" });\n  }\n\n  async logoutUser(req: Request, res: Response, next: NextFunction) {\n    res\n      .clearCookie(\"refreshToken\", {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      })\n      .clearCookie(\"accessToken\", {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      })\n      .json({ message: \"User logged out successfully\" });\n  }\n\n  encryptToken = (token: string): string => {\n    const key = Buffer.from(\"12345678901234567890123456789012\");\n    const algorithm = \"aes-256-cbc\";\n    const initVector = Buffer.from(\"1234567890abcdef\");\n    const cipher = createCipheriv(algorithm, key, initVector);\n    return cipher.update(token, \"utf8\", \"hex\") + cipher.final(\"hex\");\n  };\n\n  decryptToken = (token: string): string => {\n    const key = Buffer.from(\"12345678901234567890123456789012\");\n    const algorithm = \"aes-256-cbc\";\n    const initVector = Buffer.from(\"1234567890abcdef\");\n    const decipher = createDecipheriv(algorithm, key, initVector);\n    return decipher.update(token, \"hex\", \"utf8\") + decipher.final(\"utf8\");\n  };\n\n  hashPassword = async (password: string): Promise<string> => {\n    const hashPassword = await hash(password, 16);\n\n    return hashPassword;\n  };\n  verifyPassword = async (\n    password: string,\n    actual_password: string\n  ): Promise<boolean> => {\n    const is_correct_password = await compare(password, actual_password);\n    return is_correct_password;\n  };\n\n  sendMail = async (email: string, magicLink: string) => {\n    try {\n      let transporter = nodeMailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: String(env.NODE_MAILER_USER),\n          pass: String(env.NODE_MAILER_PASSWORD),\n        },\n      });\n\n      const info = await transporter.sendMail({\n        from: \"hadeedtariq12@gmail.com\",\n        to: email,\n        subject: \"Verification email\",\n        html: `\n        <h1></h1>Please verify your registeration on daily dev by clicking the verification link below:</h1>\n        <a href=\"${magicLink}\">${magicLink}</a>\n        `,\n      });\n      return { info };\n    } catch (err) {\n      console.log(err);\n      return { error: err };\n    }\n  };\n  generateAccessAndRefreshToken = function (user: any) {\n    const refreshToken = sign({ id: user.id }, env.JWT_REFRESH_TOKEN_SECRET, {\n      expiresIn: \"15d\",\n    });\n    const accessToken = sign(\n      {\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        email: user.email,\n        avatar: user.avatar,\n        profession: user.profession,\n      },\n      env.JWT_ACCESS_TOKEN_SECRET,\n      { expiresIn: \"2d\" }\n    );\n\n    return { refreshToken, accessToken };\n  };\n}\n\nexport const userController = new UserController();\n","import { redis } from \"@/db/connect\";\nimport { Queue } from \"bullmq\";\n\nconst emailQueue = new Queue(\"emailQueue\", { connection: redis });\n\nasync function addEmailJob(email: string, magicLink: string) {\n  await emailQueue.add(\"sendEmail\", { email, magicLink });\n}\n\nexport { addEmailJob };\n","import { NextFunction, Request, Response } from \"express\";\n\nexport function asyncHandler(handler: any) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(handler(req, res, next)).catch((err) => {\n      console.log(err);\n      next(err);\n    });\n  };\n}\n","import { env } from \"@/common/utils/envConfig\";\nimport { NextFunction, Request, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport async function checkAuth(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const { accessToken } = req.cookies;\n\n    if (!accessToken) {\n      return next({\n        message: \"Access Token not found\",\n        status: 404,\n      });\n    }\n\n    const user = jwt.verify(accessToken, env.JWT_ACCESS_TOKEN_SECRET);\n\n    if (!user) {\n      return next({\n        message: \"Invalid Access Token\",\n        status: 404,\n      });\n    }\n\n    req.body.user = user;\n    next();\n  } catch (error) {\n    return next({\n      message:\n        error instanceof jwt.JsonWebTokenError\n          ? \"Please authenticate to perform this action\"\n          : \"Authentication Error\",\n      status: 401,\n    });\n  }\n}\n","import { Router } from \"express\";\n\nimport { asyncHandler } from \"@/utils/asyncHandler\";\n\nimport { checkAuth } from \"../middleware\";\nimport { profileController } from \"./profile.controller\";\n\nconst router = Router();\nrouter.use(checkAuth);\nrouter.get(\"/\", asyncHandler(profileController.getProfile));\nrouter.get(\"/user/:username\", asyncHandler(profileController.getUserProfile));\nrouter.get(\n  \"/get-my-joined-squads\",\n  asyncHandler(profileController.getMyJoinedSquads)\n);\nrouter.get(\n  \"/get-user-joined-squads\",\n  asyncHandler(profileController.getUserJoinedSquads)\n);\nrouter.put(\"/edit\", asyncHandler(profileController.editProfile));\nrouter.post(\"/readme-handler\", asyncHandler(profileController.readmeHandler));\nrouter.put(\"/update-streak\", asyncHandler(profileController.updateStreak));\nexport { router as profileRouter };\n","import { queryDb, redis } from \"@/db/connect\";\nimport { NextFunction, Request, Response } from \"express\";\nimport sanitizeHtml from \"sanitize-html\";\n\nimport { DatabaseError } from \"pg\";\nimport { sign } from \"jsonwebtoken\";\nimport { env } from \"@/common/utils/envConfig\";\n\nclass ProfileController {\n  constructor() {\n    this.getProfile = this.getProfile.bind(this);\n    this.getUserProfile = this.getUserProfile.bind(this);\n    this.editProfile = this.editProfile.bind(this);\n    this.readmeHandler = this.readmeHandler.bind(this);\n    this.updateStreak = this.updateStreak.bind(this);\n    this.getMyJoinedSquads = this.getMyJoinedSquads.bind(this);\n    this.getUserJoinedSquads = this.getUserJoinedSquads.bind(this);\n    this.isValidSocialLink = this.isValidSocialLink.bind(this);\n  }\n  async getUserProfile(req: Request, res: Response, next: NextFunction) {\n    const { username } = req.params;\n\n    try {\n      const query = `\n      WITH actual_user AS (\n          SELECT \n              a_u.name,\n              a_u.username,\n              a_u.avatar,\n              a_u.email,\n              a_u.created_at,\n              a_u.profession,\n              a_u.id\n          FROM \n              users a_u \n          WHERE \n              a_u.username = $1\n      )\n        SELECT \n            u.name,\n            u.id,\n            u.username,\n            u.avatar,\n            u.email,\n            u.created_at,\n            u.profession,\n            EXISTS (\n                  SELECT 1 \n                  FROM followers f_f\n                  WHERE f_f.follower_id = $2 \n                    AND f_f.followed_id = u.id\n              ) AS current_user_follow,\n            json_build_object(\n                'id', ab.id,\n                'bio', ab.bio,\n                'company', ab.company,\n                'job_title', ab.job_title,\n                'created_at', ab.created_at,\n                'readme', ab.readme\n            ) AS about,\n            json_build_object(\n                'id', sl.id,\n                'github', sl.github,\n                'linkedin', sl.linkedin,\n                'website', sl.website,\n                'x', sl.x,\n                'youtube', sl.youtube,\n                'stack_overflow', sl.stack_overflow,\n                'reddit', sl.reddit,\n                'roadmap_sh', sl.roadmap_sh,\n                'codepen', sl.codepen,\n                'mastodon', sl.mastodon,\n                'threads', sl.threads,\n                'created_at', sl.created_at\n            ) AS social_links,\n            json_build_object(\n                'id', ust.id,\n                'followers', ust.followers,\n                'following', ust.following,\n                'reputation', ust.reputation,\n                'views', ust.views,\n                'upvotes', ust.upvotes\n            ) AS user_stats,\n            json_build_object(\n                'id', stk.id,\n                'streak_start', stk.streak_start,\n                'streak_end', stk.streak_end,\n                'updated_at', stk.updated_at,\n                'streak_length', stk.streak_length,\n                'longest_streak', stk.longest_streak\n            ) AS streaks\n        FROM \n            actual_user u\n        LEFT JOIN \n            about ab ON u.id = ab.user_id\n        LEFT JOIN \n            social_links sl ON u.id = sl.user_id\n        LEFT JOIN \n            user_stats ust ON u.id = ust.user_id\n        LEFT JOIN \n            streaks stk ON u.id = stk.user_id;\n  `;\n\n      const { rows } = await queryDb(query, [username, req.body.user.id]);\n\n      if (rows.length === 0) {\n        return next({ status: 404, message: \"User not found\" });\n      }\n\n      res.status(200).json({ profile: rows[0] });\n    } catch (error: any) {\n      console.log(error);\n\n      if (error instanceof DatabaseError) {\n        return next({ status: 500, message: \"Database query error\" });\n      }\n\n      next(error);\n    }\n  }\n  async getProfile(req: Request, res: Response, next: NextFunction) {\n    const { user: authUser } = req.body;\n\n    try {\n      const query = `\n      WITH actual_user AS (\n          SELECT \n              a_u.name,\n              a_u.id,\n              a_u.username,\n              a_u.avatar,\n              a_u.email,\n              a_u.created_at,\n              a_u.profession\n          FROM \n              users a_u \n          WHERE \n              a_u.id = $1\n      )\n        SELECT \n          u.*,\n          row_to_json(ab) AS about,\n          row_to_json(sl) AS social_links,\n          row_to_json(ust) AS user_stats,\n          row_to_json(stk) AS streaks\n        FROM \n          actual_user u\n        LEFT JOIN \n          about ab ON u.id = ab.user_id\n        LEFT JOIN \n          social_links sl ON u.id = sl.user_id\n        LEFT JOIN \n          user_stats ust ON u.id = ust.user_id\n        LEFT JOIN \n          streaks stk ON u.id = stk.user_id\n  `;\n\n      const { rows } = await queryDb(query, [authUser.id]);\n\n      if (rows.length === 0) {\n        return next({ status: 404, message: \"User not found\" });\n      }\n\n      res.status(200).json({ profile: rows[0] });\n    } catch (error) {\n      if (error instanceof DatabaseError) {\n        return next({ status: 500, message: \"Database query error\" });\n      }\n\n      next(error);\n    }\n  }\n\n  async getUserJoinedSquads(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { userId } = req.query;\n      if (!userId || isNaN(userId as any)) {\n        return res.status(400).json({ message: \"User ID is required.\" });\n      }\n      const query = `\n          WITH user_squads AS (\n              SELECT squad_id \n              FROM squad_members \n              WHERE user_id = $1\n          )\n          SELECT \n              s.id AS squad_id, \n              s.name AS squad_name, \n              s.squad_handle AS squad_handle,\n              s.thumbnail AS squad_thumbnail\n          FROM user_squads us\n          JOIN squads s ON us.squad_id = s.id;\n    `;\n\n      const { rows: squads } = await queryDb(query, [Number(userId)]);\n      if (squads.length === 0) {\n        return res.status(200).json({\n          message: \"User have not joined any squads yet.\",\n          squads: [],\n        });\n      }\n\n      res.status(200).json({\n        squads,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async getMyJoinedSquads(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.body.user.id;\n      const query = `\n          WITH user_squads AS (\n              SELECT squad_id \n              FROM squad_members \n              WHERE user_id = $1\n          )\n          SELECT \n              s.id AS squad_id, \n              s.name AS squad_name, \n              s.squad_handle AS squad_handle,\n              s.thumbnail AS squad_thumbnail\n          FROM user_squads us\n          JOIN squads s ON us.squad_id = s.id;\n    `;\n\n      const { rows: squads } = await queryDb(query, [userId]);\n      if (squads.length === 0) {\n        return res.status(200).json({\n          message: \"You have not joined any squads yet.\",\n          squads: [],\n        });\n      }\n\n      res.status(200).json({\n        squads,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async editProfile(req: Request, res: Response, next: NextFunction) {\n    const {\n      user,\n      username,\n      avatar,\n      name,\n      email,\n      profession,\n      bio,\n      company,\n      job_title,\n      github,\n      linkedin,\n      website,\n      x,\n      youtube,\n      stack_overflow,\n      reddit,\n      roadmap_sh,\n      codepen,\n      mastodon,\n      threads,\n    } = req.body;\n\n    let accessToken = req.cookies.accessToken;\n\n    if (website) {\n      const websiteUrl = new URL(website);\n      if (\n        websiteUrl.protocol !== \"https\" ||\n        websiteUrl.hostname.includes(\"localhost\")\n      ) {\n        return res.status(400).json({ message: \"Invalid website URL.\" });\n      }\n\n      const query = `\n        UPDATE social_links \n        SET website=$1 \n        WHERE user_id = $2 \n        RETURNING id;\n      `;\n\n      const values = [website, req.body.user.id];\n\n      const { rows: socialLinksRows } = await queryDb(query, values);\n\n      if (socialLinksRows.length === 0) {\n        return next({ status: 404, message: \"User not found\" });\n      }\n    }\n\n    if (\n      username !== user.username ||\n      avatar !== user.avatar ||\n      name !== user.name ||\n      email !== user.email ||\n      profession !== user.profession\n    ) {\n      console.log(\"run user profile\");\n      const query = `UPDATE users SET username=$1, avatar=$2, name=$3, email=$4, profession=$5 WHERE id=$6 RETURNING id`;\n      const { rows } = await queryDb(query, [\n        username,\n        avatar,\n        name,\n        email,\n        profession,\n        req.body.user.id,\n      ]);\n\n      accessToken = sign(\n        {\n          id: user.id,\n          username: username,\n          name: name,\n          email: email,\n          avatar: avatar,\n          profession: profession,\n        },\n        env.JWT_ACCESS_TOKEN_SECRET,\n        { expiresIn: \"2d\" }\n      );\n\n      if (rows.length === 0) {\n        return next({ status: 404, message: \"User not found\" });\n      }\n    }\n\n    if (bio || company || job_title) {\n      console.log(\"run job\");\n\n      const query = `UPDATE about SET bio=$1, company=$2, job_title=$3 WHERE user_id=$4 RETURNING *`;\n      const { rows: aboutRows } = await queryDb(query, [\n        String(bio),\n        String(company),\n        String(job_title),\n        req.body.user.id,\n      ]);\n\n      if (aboutRows.length === 0) {\n        return next({ status: 404, message: \"User not found\" });\n      }\n    }\n\n    const socialFields = {\n      github,\n      linkedin,\n      x,\n      youtube,\n      stack_overflow,\n      reddit,\n      roadmap_sh,\n      codepen,\n      mastodon,\n      threads,\n    };\n\n    const validFields = Object.entries(socialFields)\n      .filter(([key, value]) => value && this.isValidSocialLink(key, value))\n      .map(([key, value], index) => ({\n        column: key,\n        value: value,\n        paramIndex: index + 1,\n      }));\n\n    console.log(validFields);\n\n    if (validFields.length > 0) {\n      console.log(\"run user social\");\n\n      const setClause = validFields\n        .map(({ column }, index) => `${column} = $${index + 1}`)\n        .join(\", \");\n\n      const values = validFields.map(({ value }) => value);\n      values.push(req.body.user.id);\n\n      const query = `\n        UPDATE social_links \n        SET ${setClause} \n        WHERE user_id = $${values.length} \n        RETURNING id;\n      `;\n\n      const { rows: socialLinksRows } = await queryDb(query, values);\n\n      if (socialLinksRows.length === 0) {\n        return next({ status: 404, message: \"User not found\" });\n      }\n    }\n\n    res\n      .status(200)\n      .cookie(\"accessToken\", accessToken, {\n        secure: true,\n        httpOnly: false,\n        sameSite: \"none\",\n      })\n      .json({ message: \"Profile Updated Successfully\" });\n  }\n  async updateStreak(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { user } = req.body;\n      const currentDate = new Date();\n      const redisKey = `streak:${user.id}`;\n\n      let streakData: any = await redis.get(redisKey);\n\n      if (streakData) {\n        streakData = JSON.parse(streakData);\n      } else {\n        const { rows } = await queryDb(\n          `SELECT updated_at, streak_length, longest_streak FROM streaks WHERE user_id = $1`,\n          [user.id]\n        );\n\n        if (rows.length === 0) {\n          return next({ status: 404, message: \"User not found\" });\n        }\n\n        streakData = rows[0];\n\n        await redis.set(redisKey, JSON.stringify(streakData), \"EX\", 86400);\n      }\n\n      const lastUpdated = new Date(streakData.updated_at);\n      const sameDay =\n        currentDate.toISOString().split(\"T\")[0] ===\n        lastUpdated.toISOString().split(\"T\")[0];\n\n      if (sameDay) {\n        return res.status(204).json({});\n      }\n\n      const diffDays = Math.floor(\n        (Number(currentDate) - Number(lastUpdated)) / (1000 * 60 * 60 * 24)\n      );\n\n      let query, values;\n\n      if (diffDays > 1) {\n        const longestStreak = Math.max(\n          streakData.streak_length,\n          streakData.longest_streak\n        );\n\n        query = `\n          UPDATE streaks\n          SET streak_length = $1, updated_at = $2, streak_end = $2, streak_start = $2, longest_streak = $3\n          WHERE user_id = $4\n        `;\n        values = [1, currentDate, longestStreak, user.id];\n\n        streakData = {\n          streak_length: 1,\n          updated_at: currentDate,\n          longest_streak: longestStreak,\n        };\n      } else {\n        query = `\n          UPDATE streaks\n          SET streak_length = streak_length + 1, updated_at = $1\n          WHERE user_id = $2\n        `;\n        values = [currentDate, user.id];\n\n        streakData.streak_length += 1;\n        streakData.updated_at = currentDate;\n      }\n\n      await queryDb(query, values);\n\n      await redis.set(redisKey, JSON.stringify(streakData), \"EX\", 86400);\n\n      return res.status(201).json({ message: \"Streak updated successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async readmeHandler(req: Request, res: Response, next: NextFunction) {\n    const { readme } = req.body;\n\n    if (!readme || typeof readme !== \"string\") {\n      return res.status(400).json({\n        error: 'The \"readme\" field is required and should be a string.',\n      });\n    }\n    const sanitizedReadme = sanitizeHtml(readme, {\n      allowedTags: [],\n      allowedAttributes: {},\n    });\n\n    const query = \"update  about set readme= $1  where user_id = $2\";\n    const values = [sanitizedReadme, req.body.user.id];\n\n    await queryDb(query, values);\n\n    return res.status(201).json({\n      message: \"Readme successfully saved.\",\n    });\n  }\n\n  isValidSocialLink(type: string, url: string) {\n    const domainMap: any = {\n      github: \"github.com\",\n      linkedin: \"linkedin.com\",\n      x: \"x.com\",\n      youtube: \"youtube.com\",\n      stack_overflow: \"stackoverflow.com\",\n      reddit: \"reddit.com\",\n      roadmap_sh: \"roadmap.sh\",\n      codepen: \"codepen.io\",\n      mastodon: \"mastodon.social\",\n      threads: \"threads.net\",\n    };\n\n    try {\n      const parsedUrl = new URL(url);\n\n      return parsedUrl.protocol === \"https:\" && domainMap[type]\n        ? parsedUrl.hostname.includes(domainMap[type])\n        : false;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport const profileController = new ProfileController();\n","import { Router } from \"express\";\nimport { asyncHandler } from \"@/utils/asyncHandler\";\nimport { checkAuth } from \"../middleware\";\nimport { postController } from \"./posts.controller\";\n\nconst router = Router();\n\nrouter.use(checkAuth);\nrouter.get(\"/\", asyncHandler(postController.getPosts));\nrouter.get(\"/get-my-posts\", asyncHandler(postController.getMyPosts));\nrouter.get(\"/get-user-posts\", asyncHandler(postController.getUserPosts));\nrouter.get(\"/post-by-slug\", asyncHandler(postController.getPostBySlug));\n\nrouter.get(\n  \"/get-post-comments/:postId\",\n  asyncHandler(postController.getPostComments)\n);\nrouter.post(\"/create\", asyncHandler(postController.createPost));\n\nrouter.post(\"/comment/:postId\", asyncHandler(postController.commentOnPost));\nrouter.post(\"/reply/:commentId\", asyncHandler(postController.replyToComment));\n\nrouter.put(\"/update-comment\", asyncHandler(postController.updateComment));\nrouter.put(\"/update-reply\", asyncHandler(postController.updateReply));\nrouter.put(\n  \"/upvote-comment/:commentId\",\n  asyncHandler(postController.upvoteComment)\n);\nrouter.put(\"/:postId\", asyncHandler(postController.editPost));\nrouter.put(\"/upvote/:postId\", asyncHandler(postController.upvotePost));\nrouter.put(\"/view/:postId\", asyncHandler(postController.viewPost));\n\nrouter.delete(\n  \"/delete-comment/:commentId\",\n  asyncHandler(postController.deleteComment)\n);\nrouter.delete(\n  \"/delete-reply/:commentId/:replyId\",\n  asyncHandler(postController.deleteCommentReply)\n);\nrouter.delete(\"/delete-post/:postId\", asyncHandler(postController.deletePost));\n\nexport { router as postRouter };\n","import { pool, queryDb } from \"@/db/connect\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { DatabaseError } from \"pg\";\nimport sanitizeHtml from \"sanitize-html\";\nimport nlp from \"compromise\";\nimport removeMd from \"remove-markdown\";\n\nclass PostController {\n  constructor() {\n    this.getPosts = this.getPosts.bind(this);\n    this.getPostBySlug = this.getPostBySlug.bind(this);\n    this.getMyPosts = this.getMyPosts.bind(this);\n    this.getUserPosts = this.getUserPosts.bind(this);\n    this.getPostComments = this.getPostComments.bind(this);\n    this.createPost = this.createPost.bind(this);\n    this.editPost = this.editPost.bind(this);\n    this.upvotePost = this.upvotePost.bind(this);\n    this.viewPost = this.viewPost.bind(this);\n    this.commentOnPost = this.commentOnPost.bind(this);\n    this.replyToComment = this.replyToComment.bind(this);\n    this.updateComment = this.updateComment.bind(this);\n    this.updateReply = this.updateReply.bind(this);\n    this.upvoteComment = this.upvoteComment.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n    this.deleteComment = this.deleteComment.bind(this);\n    this.deleteCommentReply = this.deleteCommentReply.bind(this);\n  }\n\n  getTags = () => {\n    const res = [\n      \"software-engineering\",\n      \"backend-development\",\n      \"frontend-development\",\n      \"full-stack-development\",\n      \"web-development\",\n      \"mobile-development\",\n      \"cloud-computing\",\n      \"artificial-intelligence\",\n      \"machine-learning\",\n      \"data-science\",\n      \"data-engineering\",\n      \"devops\",\n      \"agile-methodology\",\n      \"scrum\",\n      \"test-driven-development\",\n      \"unit-testing\",\n      \"integration-testing\",\n      \"continuous-integration\",\n      \"continuous-deployment\",\n      \"version-control\",\n      \"git\",\n      \"docker\",\n      \"kubernetes\",\n      \"microservices\",\n      \"restful-api\",\n      \"graphql\",\n      \"nodejs\",\n      \"express\",\n      \"reactjs\",\n      \"vuejs\",\n      \"angular\",\n      \"typescript\",\n      \"python\",\n      \"java\",\n      \"ruby-on-rails\",\n      \"cplusplus\",\n      \"go-programming-language\",\n      \"cloud-native\",\n      \"serverless-architecture\",\n      \"cybersecurity\",\n      \"blockchain-technology\",\n      \"database-management\",\n      \"sql\",\n      \"nosql\",\n      \"mongodb\",\n      \"postgresql\",\n      \"mysql\",\n      \"data-structures\",\n      \"algorithms\",\n    ];\n    return res;\n  };\n\n  detectTags = (content: string) => {\n    const predefinedTags = this.getTags();\n    const doc = nlp(removeMd(content));\n    const nouns = doc.nouns().out(\"array\");\n    const adjectives = doc.adjectives().out(\"array\");\n    const acronyms = doc.acronyms().out(\"array\");\n    const adverbs = doc.adverbs().out(\"array\");\n    const tags = [\n      ...new Set([...nouns, ...adjectives, ...acronyms, ...adverbs]),\n    ];\n\n    return tags.reduce((acc: string[], keyword: any) => {\n      const tag = predefinedTags.includes(\n        keyword.toLowerCase().split(\" \").join(\"-\")\n      );\n      if (tag) {\n        acc.push(keyword.toLowerCase().split(\" \").join(\"-\"));\n      }\n      return acc;\n    }, []);\n  };\n\n  async getPosts(req: Request, res: Response, next: NextFunction) {\n    const { pageSize, cursor, sortingOrder } = req.query;\n\n    // const { rows } = await queryDb(`\n    //       SELECT\n    // indexname,\n    // indexdef\n    //   FROM\n    //       pg_indexes\n    //   WHERE\n    //       tablename = 'posts';  -- Replace 'your_table_name' with the actual table name\n    //   `);\n\n    // console.log(\"====================================\");\n    // console.log(rows);\n    // console.log(\"====================================\");\n\n    const allowedSortingOrders = [\"id\", \"\", \"upvotes\", \"views\"];\n\n    if (!allowedSortingOrders.includes(String(sortingOrder))) {\n      return res.status(400).json({\n        message:\n          \"Invalid sorting order. Allowed values: 'id', '', 'upvotes', 'views'.\",\n      });\n    }\n\n    try {\n      let query = \"\";\n\n      if (sortingOrder === \"id\" || sortingOrder === \"\") {\n        query = `\n        WITH paginated_posts AS (\n            SELECT id\n            FROM posts\n            where id > $2\n            ORDER BY id ASC\n            LIMIT $3\n        )\n        SELECT \n            p.id,\n            p.title,\n            p.thumbnail,\n            p.content,\n            p.slug,\n            p.tags,\n            p.created_at,\n            p_v.upvotes AS upvotes,\n            p_vw.views AS views,\n            JSON_BUILD_OBJECT(\n                'squad_thumbnail', p_sq.thumbnail,\n                'squad_handle', p_sq.squad_handle\n            ) AS squad_details,\n            JSON_BUILD_OBJECT(\n                'author_avatar', u.avatar,\n                'author_name', u.name,\n                'author_username', u.username,\n                'author_id', u.id\n            ) AS author_details,\n            EXISTS (\n                SELECT 1 \n                FROM user_upvotes u_u_v \n                WHERE u_u_v.user_id = $1 \n                  AND u_u_v.post_id = p.id\n            ) AS current_user_upvoted\n        FROM paginated_posts pp\n        JOIN posts p ON pp.id = p.id\n        JOIN post_upvotes p_v ON p.id = p_v.post_id\n        JOIN post_views p_vw ON p.id = p_vw.post_id\n        JOIN squads p_sq ON p.squad_id = p_sq.id\n        JOIN users u ON p.author_id = u.id\n        ORDER BY p.id;\n    `;\n        const { rows } = await queryDb(query, [\n          req.body.user.id,\n          cursor,\n          pageSize ? pageSize : 1,\n        ]);\n\n        return res.status(200).json({ posts: rows });\n      }\n\n      if (sortingOrder === \"upvotes\") {\n        query = `\n         WITH paginated_posts AS (\n             SELECT p.id, p_v.upvotes\n              FROM posts p\n              INNER JOIN post_upvotes p_v ON p.id = p_v.post_id\n              WHERE (p_v.upvotes < $2 OR (p_v.upvotes = $2 AND p.id < $3))  \n              ORDER BY p_v.upvotes DESC, p.id DESC \n              LIMIT $4\n          )\n          SELECT \n              p.id,\n              p.title,\n              p.thumbnail,\n              p.content,\n              p.slug,\n              p.tags,\n              p.created_at,\n              pp.upvotes AS upvotes,\n              p_vw.views AS views,\n              JSON_BUILD_OBJECT(\n                  'squad_thumbnail', p_sq.thumbnail,\n                  'squad_handle', p_sq.squad_handle\n              ) AS squad_details,\n              JSON_BUILD_OBJECT(\n                  'author_avatar', u.avatar,\n                  'author_name', u.name,\n                  'author_username', u.username,\n                  'author_id', u.id\n              ) AS author_details,\n              EXISTS (\n                  SELECT 1 \n                  FROM user_upvotes u_u_v \n                  WHERE u_u_v.user_id = $1 \n                    AND u_u_v.post_id = p.id\n              ) AS current_user_upvoted\n          FROM paginated_posts pp\n          JOIN posts p ON pp.id = p.id\n          JOIN post_views p_vw ON p.id = p_vw.post_id\n          JOIN squads p_sq ON p.squad_id = p_sq.id\n          JOIN users u ON p.author_id = u.id\n          ORDER BY pp.upvotes DESC;\n    `;\n        const upvotes = cursor?.toString().split(\",\")[0].split(\":\")[1];\n        const postId = cursor?.toString().split(\",\")[1].split(\":\")[1];\n        const { rows } = await queryDb(query, [\n          req.body.user.id,\n          upvotes,\n          postId,\n          pageSize ? pageSize : 1,\n        ]);\n\n        return res.status(200).json({ posts: rows });\n      }\n      if (sortingOrder === \"views\") {\n        query = `\n             WITH paginated_posts AS (\n                  SELECT \n                  p.id,\n                  p_vw.views,\n                  p_v.upvotes AS upvotes\n                  FROM posts p\n                  INNER JOIN post_views p_vw ON p.id = p_vw.post_id\n                  JOIN post_upvotes p_v ON p.id = p_v.post_id\n                  WHERE (p_vw.views < $2 OR (p_vw.views = $2 AND p.id < $3))  \n                  ORDER BY p_vw.views DESC, p.id DESC \n                  LIMIT $4\n              )\n              SELECT\n                  p.id,\n                  p.title,\n                  p.thumbnail,\n                  p.content,\n                  p.slug,\n                  p.tags,\n                  p.created_at,\n                  pp.views AS views,\n                  pp.upvotes AS upvotes,\n                  JSON_BUILD_OBJECT(\n                      'squad_thumbnail', p_sq.thumbnail,\n                      'squad_handle', p_sq.squad_handle\n                  ) AS squad_details,\n                  JSON_BUILD_OBJECT(\n                      'author_avatar', u.avatar,\n                      'author_name', u.name,\n                      'author_username', u.username,\n                      'author_id', u.id\n                  ) AS author_details,\n                  EXISTS (\n                      SELECT 1\n                      FROM user_upvotes u_u_v\n                      WHERE u_u_v.user_id = $1\n                        AND u_u_v.post_id = p.id\n                  ) AS current_user_upvoted\n              FROM paginated_posts pp\n              JOIN posts p ON pp.id = p.id\n              JOIN post_views p_vw ON p.id = p_vw.post_id\n              JOIN squads p_sq ON p.squad_id = p_sq.id\n              JOIN users u ON p.author_id = u.id\n              ORDER BY pp.views DESC;\n        `;\n\n        const views = cursor?.toString().split(\",\")[0].split(\":\")[1];\n        const postId = cursor?.toString().split(\",\")[1].split(\":\")[1];\n\n        const { rows } = await queryDb(query, [\n          req.body.user.id,\n          views,\n          postId,\n          pageSize ? pageSize : 1,\n        ]);\n\n        return res.status(200).json({ posts: rows });\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n  async getPostBySlug(req: Request, res: Response, next: NextFunction) {\n    const { postSlug } = req.query;\n    if (!postSlug) {\n      return res.status(400).json({ message: \"Post Slug is required.\" });\n    }\n    try {\n      const query = `\n      with required_post as(\n      select  \n          r_p.id,\n          r_p.title,\n          r_p.thumbnail,\n          r_p.content,\n          r_p.slug,\n          r_p.created_at,\n          r_p.tags,\n          r_p.squad_id,\n          r_p.author_id\n      from posts r_p where r_p.slug = $2\n      )\n      SELECT \n          p.*,\n          p_v.upvotes AS upvotes,\n          p_vw.views AS views,\n          JSON_BUILD_OBJECT(\n              'squad_thumbnail', p_sq.thumbnail,\n              'squad_handle', p_sq.squad_handle\n          ) AS squad_details,\n          JSON_BUILD_OBJECT(\n              'author_avatar', u.avatar,\n              'author_name', u.name,\n              'author_username', u.username\n          ) AS author_details,\n          EXISTS (\n              SELECT 1 \n              FROM user_upvotes u_u_v \n              WHERE u_u_v.user_id = $1 \n                AND u_u_v.post_id = p.id\n          ) AS current_user_upvoted\n      FROM required_post p\n      INNER JOIN post_upvotes p_v ON p.id = p_v.post_id\n      INNER JOIN post_views p_vw ON p.id = p_vw.post_id\n      INNER JOIN squads p_sq ON p.squad_id = p_sq.id\n      INNER JOIN users u ON p.author_id = u.id\n  `;\n\n      const { rows } = await queryDb(query, [req.body.user.id, postSlug]);\n\n      res.status(200).json(rows[0]);\n    } catch (error) {\n      console.log(\"====================================\");\n      console.log(error);\n      console.log(\"====================================\");\n      next(error);\n    }\n  }\n\n  async getUserPosts(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.query;\n    if (!userId || isNaN(userId as any)) {\n      return res.status(400).json({ message: \"User ID is required.\" });\n    }\n    try {\n      const query = `\n      WITH user_posts AS (\n        SELECT  \n            p.id,\n            p.thumbnail,\n            p.title,\n            p.content,\n            p.slug,\n            p.created_at,\n            p.squad_id\n        FROM posts p\n        WHERE p.author_id = $1\n      )\n      SELECT \n            p.*,\n            JSON_BUILD_OBJECT(\n                'squad_thumbnail', p_sq.thumbnail,\n                'squad_handle', p_sq.squad_handle\n            ) AS squad_details\n        FROM user_posts p\n        INNER JOIN squads p_sq ON p.squad_id = p_sq.id;\n  `;\n\n      const { rows } = await queryDb(query, [Number(userId)]);\n\n      res.status(200).json({ posts: rows });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async getMyPosts(req: Request, res: Response, next: NextFunction) {\n    try {\n      const query = `\n      WITH user_posts AS (\n        SELECT  \n            p.id,\n            p.thumbnail,\n            p.title,\n            p.content,\n            p.slug,\n            p.created_at,\n            p.squad_id\n        FROM posts p\n        WHERE p.author_id = $1\n      )\n      SELECT \n            p.*,\n            JSON_BUILD_OBJECT(\n                'squad_thumbnail', p_sq.thumbnail,\n                'squad_handle', p_sq.squad_handle\n            ) AS squad_details\n        FROM user_posts p\n        INNER JOIN squads p_sq ON p.squad_id = p_sq.id;\n  `;\n\n      const { rows } = await queryDb(query, [req.body.user.id]);\n\n      res.status(200).json({ posts: rows });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getPostComments(req: Request, res: Response, next: NextFunction) {\n    const { postId } = req.params;\n    const { pageSize, pageNumber } = req.query;\n\n    if (!postId) {\n      return res.status(400).json({ message: \"Post ID is required.\" });\n    }\n\n    try {\n      const commentsQuery = `\n     WITH current_post_comments AS (\n            SELECT c.id, c.content, c.created_at, c.updated_at, c.edited, c.user_id\n            FROM post_comments c\n            WHERE c.post_id = $1\n            ORDER BY c.id\n            LIMIT $3 OFFSET ($4 - 1) * $3\n        ),\n        comment_upvotes_count AS (\n            SELECT comment_id, COUNT(*) AS total_upvotes\n            FROM comment_upvotes\n            GROUP BY comment_id\n        ),\n        comment_upvotes_user AS (\n            SELECT comment_id, 1 AS current_user_upvoted\n            FROM comment_upvotes\n            WHERE user_id = $2\n        ),\n        replies_agg AS (\n            SELECT cr.comment_id, \n                  JSON_AGG(\n                      JSON_BUILD_OBJECT(\n                          'id', cr.id,\n                          'content', cr.content,\n                          'created_at', cr.created_at,\n                          'updated_at', cr.updated_at,\n                          'edited', cr.edited,\n                          'sender_details', JSON_BUILD_OBJECT(\n                              'name', s.name,\n                              'username', s.username,\n                              'avatar', s.avatar,\n                              'id', s.id\n                          ),\n                          'recipient_details', JSON_BUILD_OBJECT(\n                              'name', r.name,\n                              'username', r.username,\n                              'avatar', r.avatar,\n                              'id', r.id\n                          )\n                      )\n                  ) AS replies\n            FROM comment_replies cr\n            LEFT JOIN users s ON s.id = cr.sender_id\n            LEFT JOIN users r ON r.id = cr.recipient_id\n            GROUP BY cr.comment_id\n        )\n        SELECT \n            c.content,\n            c.created_at,\n            c.updated_at,\n            c.edited,\n            c.id,\n            JSON_BUILD_OBJECT(\n                'name', u.name,\n                'username', u.username,\n                'avatar', u.avatar,\n                'id', u.id\n            ) AS user_details,\n            COALESCE(cuv.current_user_upvoted, 0) AS current_user_upvoted,\n            COALESCE(cuc.total_upvotes, 0) AS total_upvotes,\n            COALESCE(ra.replies, '[]') AS replies\n        FROM current_post_comments c\n        INNER JOIN users u ON u.id = c.user_id\n        LEFT JOIN comment_upvotes_user cuv ON cuv.comment_id = c.id\n        LEFT JOIN comment_upvotes_count cuc ON cuc.comment_id = c.id\n        LEFT JOIN replies_agg ra ON ra.comment_id = c.id\n        ORDER BY c.id;\n      `;\n\n      const { rows: comments } = await queryDb(commentsQuery, [\n        Number(postId),\n        req.body.user.id,\n        pageSize ? pageSize : 8,\n        pageNumber ? pageNumber : 1,\n      ]);\n\n      return res.status(200).json({ comments });\n    } catch (error) {\n      console.error(\"Error fetching post comments:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while fetching the comments.\" });\n    }\n  }\n\n  async createPost(req: Request, res: Response, next: NextFunction) {\n    const { title, content, thumbnail, squad } = req.body;\n\n    if (!title || !content || !thumbnail || !squad) {\n      return res.status(400).json({ message: \"Please fill all the fields\" });\n    }\n\n    const { rows: isSquadMember } = await queryDb(\n      `SELECT 1 FROM squad_members WHERE squad_id = $1 AND user_id = $2`,\n      [Number(squad), Number(req.body.user.id)]\n    );\n\n    if (isSquadMember.length < 1) {\n      return res\n        .status(403)\n        .json({ message: \"You are not a member of this squad.\" });\n    }\n\n    const sanitizedContent = sanitizeHtml(content, {\n      allowedTags: [],\n      allowedAttributes: {},\n    });\n    const tags = this.detectTags(sanitizedContent);\n    const slug = title\n      .toLowerCase()\n      .trim()\n      .replace(/[\\s\\W-]+/g, \"-\");\n\n    const client = await pool.connect();\n\n    try {\n      await client.query(\"BEGIN\");\n\n      const postQuery = `\n      INSERT INTO posts (title, content, thumbnail, author_id, squad_id, slug,tags)\n      VALUES ($1, $2, $3, $4, $5, $6,$7)\n      RETURNING id;\n  `;\n\n      const { rows: postRows } = await client.query(postQuery, [\n        title,\n        sanitizedContent,\n        thumbnail,\n        Number(req.body.user.id),\n        Number(squad),\n        slug,\n        tags,\n      ]);\n\n      const postId = postRows[0].id;\n\n      await client.query(\n        `INSERT INTO post_upvotes (post_id, upvotes) VALUES ($1, $2)`,\n        [postId, 0]\n      );\n\n      await client.query(\n        `INSERT INTO post_views (post_id, views) VALUES ($1, $2)`,\n        [postId, 0]\n      );\n\n      await client.query(\"COMMIT\");\n      res.status(201).json({ message: \"Post created successfully.\" });\n    } catch (error) {\n      await client.query(\"ROLLBACK\");\n      console.error(\"Transaction failed and rolled back:\", error);\n      res\n        .status(500)\n        .json({ message: \"An error occurred while creating the post.\" });\n    } finally {\n      client.release();\n      console.log(\"Database client released\");\n    }\n  }\n\n  async editPost(req: Request, res: Response, next: NextFunction) {\n    const { postId } = req.params;\n    const { title, content } = req.body;\n\n    try {\n      if (title || content) {\n        const sanitizedContent = sanitizeHtml(content, {\n          allowedTags: [],\n          allowedAttributes: {},\n        });\n        const tags = this.detectTags(sanitizedContent);\n\n        const updatePostQuery = `\n          UPDATE posts\n          SET title = COALESCE($1, title),\n              content = COALESCE($2, content),\n              tags = COALESCE($3, tags)\n          WHERE id = $4\n          RETURNING id;\n        `;\n        const { rows: updatedRows } = await queryDb(updatePostQuery, [\n          title,\n          sanitizedContent,\n          tags,\n          postId,\n        ]);\n\n        if (updatedRows.length === 0) {\n          return res.status(404).json({ message: \"Post not found.\" });\n        }\n      }\n\n      res.status(200).json({ message: \"Post updated successfully.\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async upvoteComment(req: Request, res: Response, next: NextFunction) {\n    const { commentId } = req.params;\n\n    if (!commentId) {\n      return res.status(400).json({ message: \"Comment ID is required.\" });\n    }\n\n    try {\n      const userId = req.body.user.id;\n\n      const { rows } = await queryDb(\n        `SELECT 1 FROM comment_upvotes WHERE comment_id = $1 AND user_id = $2`,\n        [Number(commentId), userId]\n      );\n\n      if (rows.length > 0) {\n        await queryDb(\n          `DELETE FROM comment_upvotes \n           WHERE comment_id = $1 AND user_id = $2`,\n          [Number(commentId), userId]\n        );\n        return res.status(200).json({ message: \"Upvote removed.\" });\n      }\n      await queryDb(\n        `INSERT INTO comment_upvotes (comment_id, user_id) \n         VALUES ($1, $2)`,\n        [Number(commentId), userId]\n      );\n\n      return res.status(200).json({ message: \"Comment upvoted successfully.\" });\n    } catch (error) {\n      console.error(\"Error upvoting comment:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while upvoting the comment.\" });\n    }\n  }\n  async upvotePost(req: Request, res: Response, next: NextFunction) {\n    const { postId } = req.params;\n\n    if (!postId) {\n      return res.status(400).json({ message: \"Post ID is required.\" });\n    }\n\n    try {\n      const userId = req.body.user.id;\n\n      const { rows } = await queryDb(\n        `SELECT 1 FROM user_upvotes WHERE post_id = $1 AND user_id = $2`,\n        [Number(postId), userId]\n      );\n\n      if (rows.length > 0) {\n        await queryDb(\n          `UPDATE post_upvotes \n           SET upvotes = upvotes - 1 \n           WHERE post_id = $1 AND upvotes > 0`,\n          [Number(postId)]\n        );\n        await queryDb(\n          `DELETE FROM user_upvotes \n           WHERE post_id = $1 AND user_id = $2`,\n          [Number(postId), userId]\n        );\n        return res.status(200).json({ message: \"Upvote removed.\" });\n      }\n\n      await queryDb(\n        `UPDATE post_upvotes \n         SET upvotes = upvotes + 1 \n         WHERE post_id = $1`,\n        [Number(postId)]\n      );\n      await queryDb(\n        `INSERT INTO user_upvotes (post_id, user_id) \n         VALUES ($1, $2)`,\n        [Number(postId), userId]\n      );\n\n      return res.status(200).json({ message: \"Post upvoted successfully.\" });\n    } catch (error) {\n      console.error(\"Error upvoting post:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while upvoting the post.\" });\n    }\n  }\n  async commentOnPost(req: Request, res: Response, next: NextFunction) {\n    const { postId } = req.params;\n    const { content } = req.body;\n\n    if (!postId || !content) {\n      return res\n        .status(400)\n        .json({ message: \"Post ID and content are required.\" });\n    }\n\n    try {\n      const userId = req.body.user.id;\n      const sanitizedContent = sanitizeHtml(content, {\n        allowedTags: [],\n        allowedAttributes: {},\n      });\n\n      await queryDb(\n        `INSERT INTO post_comments (post_id, user_id, content) \n         VALUES ($1, $2, $3)`,\n        [Number(postId), userId, sanitizedContent]\n      );\n\n      return res.status(201).json({ message: \"Comment added successfully.\" });\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while adding the comment.\" });\n    }\n  }\n\n  async deleteComment(req: Request, res: Response, next: NextFunction) {\n    const { commentId } = req.params;\n\n    if (!commentId) {\n      return res.status(400).json({ message: \"Comment ID is required.\" });\n    }\n\n    try {\n      await queryDb(\n        `DELETE FROM post_comments WHERE id = $1 AND user_id = $2`,\n        [Number(commentId), req.body.user.id]\n      );\n\n      return res.status(200).json({ message: \"Comment deleted successfully.\" });\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while deleting the comment.\" });\n    }\n  }\n  async deleteCommentReply(req: Request, res: Response, next: NextFunction) {\n    const { commentId, replyId } = req.params;\n\n    if (!commentId || !replyId) {\n      return res\n        .status(404)\n        .json({ message: \"Comment and Reply Id is required\" });\n    }\n\n    try {\n      await queryDb(\n        `DELETE FROM comment_replies WHERE id = $1 AND comment_id=$2 AND sender_id = $3`,\n        [Number(replyId), Number(commentId), req.body.user.id]\n      );\n\n      return res.status(200).json({ message: \"Reply deleted successfully.\" });\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while deleting the reply.\" });\n    }\n  }\n  async updateComment(req: Request, res: Response, next: NextFunction) {\n    const { content, commentId } = req.body;\n\n    if (!commentId || !content || content.trim().length === 0) {\n      return res\n        .status(400)\n        .json({ message: \"Comment ID and valid content are required.\" });\n    }\n\n    try {\n      const userId = req.body.user.id;\n\n      const sanitizedContent = sanitizeHtml(content, {\n        allowedTags: [],\n        allowedAttributes: {},\n      });\n\n      const { rowCount } = await queryDb(\n        `UPDATE post_comments \n         SET content = $1, updated_at = CURRENT_TIMESTAMP, edited = TRUE \n         WHERE id = $2 AND user_id = $3`,\n        [sanitizedContent, Number(commentId), userId]\n      );\n\n      if (rowCount === 0) {\n        return res\n          .status(404)\n          .json({ message: \"Comment not found or not authorized to update.\" });\n      }\n\n      return res.status(200).json({ message: \"Comment updated successfully.\" });\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while updating the comment.\" });\n    }\n  }\n\n  async updateReply(req: Request, res: Response, next: NextFunction) {\n    const { content, replyId } = req.body;\n\n    if (!replyId || !content || content.trim().length === 0) {\n      return res\n        .status(400)\n        .json({ message: \"Reply ID and valid content are required.\" });\n    }\n\n    try {\n      const userId = req.body.user.id;\n\n      const sanitizedContent = sanitizeHtml(content, {\n        allowedTags: [],\n        allowedAttributes: {},\n      });\n\n      const { rowCount } = await queryDb(\n        `UPDATE comment_replies \n         SET content = $1, updated_at = CURRENT_TIMESTAMP, edited = TRUE \n         WHERE id = $2 AND sender_id = $3`,\n        [sanitizedContent, Number(replyId), userId]\n      );\n\n      if (rowCount === 0) {\n        return res\n          .status(404)\n          .json({ message: \"Reply not found or not authorized to update.\" });\n      }\n\n      return res.status(200).json({ message: \"Reply updated successfully.\" });\n    } catch (error) {\n      console.error(\"Error updating reply:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while updating the reply.\" });\n    }\n  }\n\n  async replyToComment(req: Request, res: Response, next: NextFunction) {\n    const { commentId } = req.params;\n    const { content, receiverId } = req.body;\n\n    if (!commentId || !content || !receiverId) {\n      return res.status(400).json({\n        message: \"Comment ID, content, and receiver ID are required.\",\n      });\n    }\n\n    try {\n      const senderId = req.body.user.id;\n      if (receiverId === senderId) {\n        return res\n          .status(404)\n          .json({ message: \"You can't reply on your own comment\" });\n      }\n\n      const sanitizedContent = sanitizeHtml(content, {\n        allowedTags: [],\n        allowedAttributes: {},\n      });\n\n      await queryDb(\n        `INSERT INTO comment_replies (comment_id, sender_id, recipient_id, content) \n         VALUES ($1, $2, $3, $4)`,\n        [Number(commentId), senderId, Number(receiverId), sanitizedContent]\n      );\n\n      return res.status(201).json({ message: \"Reply added successfully.\" });\n    } catch (error) {\n      console.error(\"Error replying to comment:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while adding the reply.\" });\n    }\n  }\n\n  async viewPost(req: Request, res: Response, next: NextFunction) {\n    const { postId } = req.params;\n\n    if (!postId) {\n      return res.status(400).json({ message: \"Post ID is required.\" });\n    }\n\n    try {\n      const userId = req.body.user.id;\n\n      const { rows } = await queryDb(\n        `SELECT 1 FROM user_views WHERE post_id = $1 AND user_id = $2`,\n        [Number(postId), userId]\n      );\n\n      if (rows.length > 0) {\n        return res.status(204).json({});\n      }\n\n      await queryDb(\n        `UPDATE post_views\n         SET views = views + 1 \n         WHERE post_id = $1`,\n        [Number(postId)]\n      );\n      await queryDb(\n        `INSERT INTO user_views (post_id, user_id) \n         VALUES ($1, $2)`,\n        [Number(postId), userId]\n      );\n\n      return res.status(200).json({ message: \"Post viewed successfully.\" });\n    } catch (error) {\n      console.error(\"Error upvoting post:\", error);\n      return res\n        .status(500)\n        .json({ message: \"An error occurred while upvoting the post.\" });\n    }\n  }\n\n  async deletePost(req: Request, res: Response, next: NextFunction) {\n    const { postId } = req.params;\n\n    try {\n      const deletePostQuery = `\n        DELETE FROM posts WHERE id = $1 AND author_id = $2 returning id;\n      `;\n      const { rows } = await queryDb(deletePostQuery, [\n        postId,\n        req.body.user.id,\n      ]);\n\n      if (rows.length === 0) {\n        return res.status(404).json({ message: \"Post not found.\" });\n      }\n\n      res.status(200).json({ message: \"Post deleted successfully.\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport const postController = new PostController();\n","import { Router } from \"express\";\nimport { asyncHandler } from \"@/utils/asyncHandler\";\nimport { checkAuth } from \"../middleware\";\nimport { squadController } from \"./squads.controller\";\nimport { isSquadAdmin } from \"./squads.middleware\";\n\nconst router = Router();\n\nrouter.use(checkAuth);\nrouter.post(\"/create\", asyncHandler(squadController.createSquad));\nrouter.get(\"/my\", asyncHandler(squadController.mySquads));\nrouter.get(\n  \"/details/:squad_handle\",\n  asyncHandler(squadController.squadDetails)\n);\n\nrouter.get(\"/posts/:squad_id\", asyncHandler(squadController.getSquadPosts));\nrouter.get(\"/\", asyncHandler(squadController.getSquads));\nrouter.put(\"/join\", asyncHandler(squadController.joinSquad));\nrouter.put(\"/leave\", asyncHandler(squadController.leaveSquad));\n\n// admin work\n\nrouter.put(\n  \"/edit/:squad_id/:squad_handle\",\n  isSquadAdmin,\n  asyncHandler(squadController.updateSquad)\n);\n\nrouter.put(\n  \"/:squad_id/make-admin\",\n  isSquadAdmin,\n  asyncHandler(squadController.makeAdmin)\n);\nrouter.put(\n  \"/:squad_id/make-moderator\",\n  isSquadAdmin,\n  asyncHandler(squadController.makeModerator)\n);\nrouter.put(\n  \"/:squad_id/make-member\",\n  isSquadAdmin,\n  asyncHandler(squadController.makeMember)\n);\nrouter.put(\n  \"/:squad_id/remove-member\",\n  isSquadAdmin,\n  asyncHandler(squadController.removeMember)\n);\nrouter.delete(\n  \"/:squad_id\",\n  isSquadAdmin,\n  asyncHandler(squadController.deleteSquad)\n);\n\nexport { router as squadRouter };\n","import { queryDb } from \"@/db/connect\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { DatabaseError } from \"pg\";\n\nexport const squadCategories = [\n  \"frontend\",\n  \"backend\",\n  \"full-stack\",\n  \"devops\",\n  \"data-science\",\n  \"AI\",\n  \"mobile\",\n  \"cloud\",\n  \"security\",\n  \"quality-assurance\",\n  \"general\",\n];\n\nclass SquadController {\n  constructor() {\n    this.getSquads = this.getSquads.bind(this);\n    this.getSquadMembers = this.getSquadMembers.bind(this);\n    this.createSquad = this.createSquad.bind(this);\n    this.squadDetails = this.squadDetails.bind(this);\n    this.getSquadPosts = this.getSquadPosts.bind(this);\n    this.joinSquad = this.joinSquad.bind(this);\n    this.leaveSquad = this.leaveSquad.bind(this);\n    this.updateSquad = this.updateSquad.bind(this);\n    this.deleteSquad = this.deleteSquad.bind(this);\n    this.makeAdmin = this.makeAdmin.bind(this);\n    this.makeModerator = this.makeModerator.bind(this);\n    this.makeMember = this.makeMember.bind(this);\n    this.removeMember = this.removeMember.bind(this);\n  }\n\n  async getSquads(req: Request, res: Response, next: NextFunction) {\n    try {\n      const query = `\n        SELECT s.id, s.name, s.created_at, \n               json_agg(sm.user_id) AS members\n        FROM squads s\n        LEFT JOIN squad_members sm ON s.id = sm.squad_id\n        GROUP BY s.id\n      `;\n      const { rows } = await queryDb(query);\n      res.status(200).json({ squads: rows });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getSquadMembers(req: Request, res: Response, next: NextFunction) {\n    try {\n      const query = `\n        SELECT sm.squad_id, sm.user_id, u.name AS user_name\n        FROM squad_members sm\n        JOIN users u ON sm.user_id = u.id\n      `;\n      const { rows } = await queryDb(query);\n      res.status(200).json({ members: rows });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async createSquad(req: Request, res: Response, next: NextFunction) {\n    const {\n      name,\n      squad_handle,\n      description,\n      category,\n      is_public,\n      post_creation_allowed_to,\n      invitation_permission,\n      post_approval_required,\n    } = req.body;\n\n    if (!name || !squad_handle) {\n      return res.status(400).json({\n        message: \"Name, squad handle are required.\",\n      });\n    }\n\n    if (!squadCategories.includes(category)) {\n      return res.status(400).json({\n        message: \"Invalid category\",\n      });\n    }\n\n    try {\n      const insertSquadQuery = `\n        INSERT INTO squads (\n          name, squad_handle, description, category, is_public, admin_id,\n          post_creation_allowed_to, invitation_permission, post_approval_required\n        ) VALUES (\n          $1, $2, $3, $4, $5, $6, $7, $8, $9\n        ) returning id\n      `;\n\n      const { rows } = await queryDb(insertSquadQuery, [\n        name,\n        squad_handle.trim().split(\" \").join(\"\"),\n        description || \"\",\n        category || \"general\",\n        is_public !== undefined ? is_public : true,\n        req.body.user.id,\n        post_creation_allowed_to || \"members\",\n        invitation_permission || \"members\",\n        post_approval_required || false,\n      ]);\n\n      await queryDb(\n        `\n            insert into squad_members (squad_id,user_id,role) values ($1,$2,$3)\n        `,\n        [rows[0].id, req.body.user.id, \"admin\"]\n      );\n\n      res.status(201).json({\n        message: \"Squad created successfully.\",\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getSquadPosts(req: Request, res: Response, next: NextFunction) {\n    const { pageSize, cursor } = req.query;\n    const { squad_id } = req.params;\n\n    try {\n      const query = `\n        WITH paginated_posts AS (\n            SELECT id\n            FROM posts\n            where id > $1 and squad_id=$2\n            ORDER BY id ASC\n            LIMIT $3\n        )\n        SELECT \n            p.id as post_id,\n            p.title as post_title,\n            p.tags as post_tags,\n            p.thumbnail as post_thumbnail,\n            p.created_at as post_created_at,\n            p_v.upvotes AS post_upvotes,\n            p_vw.views AS post_views,\n            u.avatar as author_avatar\n        FROM paginated_posts pp\n        JOIN posts p ON pp.id = p.id\n        JOIN post_upvotes p_v ON p.id = p_v.post_id\n        JOIN post_views p_vw ON p.id = p_vw.post_id\n        JOIN users u ON p.author_id = u.id\n        ORDER BY p.id;\n    `;\n      const { rows } = await queryDb(query, [\n        cursor,\n        Number(squad_id),\n        pageSize ? pageSize : 1,\n      ]);\n\n      return res.status(200).json({ posts: rows });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async squadDetails(req: Request, res: Response, next: NextFunction) {\n    const { squad_handle } = req.params;\n    const userId = req.body.user.id;\n\n    if (!squad_handle) {\n      return res.status(400).json({ message: \"Squad handle is required.\" });\n    }\n\n    const query = `\n        WITH selected_squad AS (\n            SELECT \n                squads.id AS squad_id,\n                squads.name AS squad_name,\n                squads.squad_handle,\n                squads.description,\n                squads.thumbnail,\n                squads.category,\n                squads.is_public,\n                squads.admin_id,\n                squads.post_creation_allowed_to,\n                squads.invitation_permission,\n                squads.post_approval_required,\n                squads.created_at\n            FROM squads \n            WHERE squads.squad_handle = $1\n        ),\n        filtered_squad_members AS (\n            SELECT \n                squad_members.role,\n                squad_members.user_id\n            FROM squad_members\n            WHERE squad_members.squad_id = (SELECT squad_id FROM selected_squad)\n        )\n        SELECT \n            s.*,\n            (\n                SELECT JSON_AGG(\n                    JSON_BUILD_OBJECT(\n                        'post_id', posts.id,\n                        'post_upvotes', COALESCE(post_upvotes.upvotes, 0),\n                        'post_views', COALESCE(post_views.views, 0)\n                    )\n                )\n                FROM posts\n                LEFT JOIN post_upvotes ON posts.id = post_upvotes.post_id\n                LEFT JOIN post_views ON posts.id = post_views.post_id\n                WHERE posts.squad_id = s.squad_id\n            ) AS squad_posts_metadata,\n            (\n                SELECT JSON_AGG(\n                    JSON_BUILD_OBJECT(\n                        'role', fsm.role,\n                        'userDetails', JSON_BUILD_OBJECT(\n                            'userId', users.id,\n                            'name', users.name,\n                            'username', users.username,\n                            'email', users.email,\n                            'avatar', users.avatar,\n                            'profession', users.profession,\n                            'current_user_follow', EXISTS(\n                                SELECT 1 \n                                FROM followers \n                                WHERE follower_id = $2 AND followed_id = users.id\n                            )\n                        )\n                    )\n                )\n                FROM filtered_squad_members fsm\n                INNER JOIN users ON fsm.user_id = users.id\n            ) AS squad_members\n        FROM selected_squad s;\n    `;\n\n    const { rows } = await queryDb(query, [squad_handle, userId]);\n    return res.status(200).json(rows[0]);\n  }\n  async mySquads(req: Request, res: Response, next: NextFunction) {\n    const query = `\n          SELECT \n            id,\n            name as squad_name,\n            squad_handle,\n            description,\n            category,\n            is_public,\n            created_at\n          FROM squads \n          WHERE admin_id = $1\n  `;\n\n    try {\n      const { rows } = await queryDb(query, [req.body.user.id]);\n\n      res.status(200).json(rows);\n    } catch (error) {\n      next(error);\n    }\n  }\n  async joinSquad(req: Request, res: Response, next: NextFunction) {\n    const { squad_handle, squad_id } = req.body;\n\n    if (!squad_handle || !squad_id) {\n      return res\n        .status(400)\n        .json({ message: \"Squad handle and ID are required.\" });\n    }\n\n    const query = `\n      WITH check_user AS (\n        SELECT id\n        FROM squad_members\n        WHERE squad_id = $1 AND user_id = $2\n      )\n      INSERT INTO squad_members (squad_id, user_id)\n      SELECT $1, $2\n      WHERE NOT EXISTS (SELECT 1 FROM check_user)\n      RETURNING id;\n    `;\n\n    try {\n      const { rows } = await queryDb(query, [squad_id, req.body.user.id]);\n\n      if (rows.length === 0) {\n        return res\n          .status(400)\n          .json({ message: \"You already joined the squad\" });\n      }\n\n      res.status(201).json({ message: \"Successfully joined the squad\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async leaveSquad(req: Request, res: Response, next: NextFunction) {\n    const { squad_id } = req.body;\n\n    if (!squad_id) {\n      return res.status(400).json({ message: \"Squad ID is required.\" });\n    }\n\n    const userId = req.body.user.id;\n\n    const query = `\n      DELETE FROM squad_members\n      WHERE squad_id = $1 AND user_id = $2\n      RETURNING id;\n    `;\n\n    try {\n      const { rows } = await queryDb(query, [squad_id, userId]);\n\n      if (rows.length === 0) {\n        return res\n          .status(400)\n          .json({ message: \"You are not a member of this squad.\" });\n      }\n\n      res.status(200).json({ message: \"Successfully left the squad\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async updateSquad(req: Request, res: Response, next: NextFunction) {\n    const { squad_handle, squad_id } = req.params;\n    if (!squad_handle) {\n      return res.status(400).json({ message: \"Squad handle is required.\" });\n    }\n    const {\n      name,\n      squad_handle: new_squad_handle,\n      description,\n      category,\n      is_public,\n      post_creation_allowed_to,\n      invitation_permission,\n      post_approval_required,\n      thumbnail,\n    } = req.body;\n\n    try {\n      const query = `\n        UPDATE squads\n        SET \n          name = $1,\n          squad_handle = $2,\n          description = $3,\n          category = $4,\n          is_public = $5,\n          post_creation_allowed_to = $6,\n          invitation_permission = $7,\n          post_approval_required = $8,\n          thumbnail = $9\n        WHERE squad_handle = $10 and id = $11\n        RETURNING squad_handle;\n      `;\n\n      const { rows } = await queryDb(query, [\n        name,\n        new_squad_handle,\n        description,\n        category,\n        is_public,\n        post_creation_allowed_to,\n        invitation_permission,\n        post_approval_required,\n        thumbnail,\n        squad_handle,\n        squad_id,\n      ]);\n\n      if (rows.length === 0) {\n        return res.status(404).json({ message: \"Squad not found.\" });\n      }\n\n      res.status(200).json({ message: \"Squad updated successfully.\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async deleteSquad(req: Request, res: Response, next: NextFunction) {\n    const { squad_id } = req.params;\n\n    try {\n      const query = `\n        DELETE FROM squads WHERE  id = $1 RETURNING id;\n      `;\n      const { rows } = await queryDb(query, [Number(squad_id)]);\n\n      if (rows.length === 0) {\n        return res.status(404).json({ message: \"Squad not found.\" });\n      }\n\n      res.status(200).json({ message: \"Squad deleted successfully.\" });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async makeAdmin(req: Request, res: Response, next: NextFunction) {\n    const { squad_id } = req.params;\n    const { user_id } = req.body;\n\n    if (!user_id) {\n      return res.status(400).json({ message: \"User id is required.\" });\n    }\n\n    try {\n      const query = `\n        UPDATE squad_members \n        SET role = 'admin' \n        WHERE squad_id = $1 AND user_id = $2 \n        RETURNING role;\n      `;\n      const { rows } = await queryDb(query, [\n        Number(squad_id),\n        Number(user_id),\n      ]);\n\n      if (rows.length === 0) {\n        return res\n          .status(404)\n          .json({ message: \"User not found or update failed.\" });\n      }\n\n      res\n        .status(200)\n        .json({ message: `User role updated to ${rows[0].role}.` });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async makeModerator(req: Request, res: Response, next: NextFunction) {\n    const { squad_id } = req.params;\n    const { user_id } = req.body;\n\n    if (!user_id) {\n      return res.status(400).json({ message: \"User id is required.\" });\n    }\n\n    try {\n      const query = `\n        UPDATE squad_members \n        SET role = 'moderator' \n        WHERE squad_id = $1 AND user_id = $2 \n        RETURNING role;\n      `;\n      const { rows } = await queryDb(query, [\n        Number(squad_id),\n        Number(user_id),\n      ]);\n\n      if (rows.length === 0) {\n        return res\n          .status(404)\n          .json({ message: \"User not found or update failed.\" });\n      }\n\n      res\n        .status(200)\n        .json({ message: `User role updated to ${rows[0].role}.` });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async makeMember(req: Request, res: Response, next: NextFunction) {\n    const { squad_id } = req.params;\n    const { user_id } = req.body;\n\n    if (!user_id) {\n      return res.status(400).json({ message: \"User id is required.\" });\n    }\n\n    try {\n      const query = `\n        UPDATE squad_members \n        SET role = 'member' \n        WHERE squad_id = $1 AND user_id = $2 \n        RETURNING role;\n      `;\n      const { rows } = await queryDb(query, [\n        Number(squad_id),\n        Number(user_id),\n      ]);\n\n      if (rows.length === 0) {\n        return res\n          .status(404)\n          .json({ message: \"User not found or update failed.\" });\n      }\n\n      res\n        .status(200)\n        .json({ message: `User role updated to ${rows[0].role}.` });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async removeMember(req: Request, res: Response, next: NextFunction) {\n    const { squad_id } = req.params;\n    const { user_id } = req.body;\n\n    if (!user_id) {\n      return res.status(400).json({ message: \"User id is required.\" });\n    }\n\n    try {\n      const query = `\n        delete from  squad_members \n        WHERE squad_id = $1 AND user_id = $2 \n        RETURNING role;\n      `;\n      const { rows } = await queryDb(query, [\n        Number(squad_id),\n        Number(user_id),\n      ]);\n\n      if (rows.length === 0) {\n        return res\n          .status(404)\n          .json({ message: \"User not found or update failed.\" });\n      }\n\n      res.status(200).json({ message: `Remove Member successfully` });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport const squadController = new SquadController();\n","import { env } from \"@/common/utils/envConfig\";\nimport { queryDb } from \"@/db/connect\";\nimport { NextFunction, Request, Response } from \"express\";\n\nexport async function isSquadAdmin(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  const user = req.body.user;\n  const { squad_id } = req.params;\n\n  if (!squad_id) {\n    return res.status(400).json({ message: \"Squad ID is required.\" });\n  }\n\n  const { rows } = await queryDb(\n    `SELECT 1 from squad_members where squad_id =$1 and user_id = $2 and role=$3`,\n    [Number(squad_id), user.id, \"admin\"]\n  );\n  if (rows.length < 1) {\n    return res\n      .status(403)\n      .json({ message: \"You are not an admin of this squad.\" });\n  }\n  next();\n}\n","import { Router } from \"express\";\nimport { asyncHandler } from \"@/utils/asyncHandler\";\nimport { checkAuth } from \"../middleware\";\nimport { followersController } from \"./followers.controller\";\n\nconst router = Router();\n\nrouter.use(checkAuth);\nrouter.put(\"/follow\", asyncHandler(followersController.followUser));\nrouter.put(\"/unfollow\", asyncHandler(followersController.unfollowUser));\n\nrouter.get(\"/my-followers\", asyncHandler(followersController.getFollowers));\nrouter.get(\n  \"/user-followers\",\n  asyncHandler(followersController.getUserFollowers)\n);\n\nrouter.get(\"/my-followings\", asyncHandler(followersController.getFollowing));\nrouter.get(\n  \"/user-followings\",\n  asyncHandler(followersController.getUserFollowing)\n);\nrouter.get(\n  \"/followings-posts\",\n  asyncHandler(followersController.getFollowingsPosts)\n);\nrouter.get(\n  \"/notifications\",\n  asyncHandler(followersController.getNotifications)\n);\nrouter.put(\n  \"/read-notifications\",\n  asyncHandler(followersController.updateNotificationStatus)\n);\n\nexport { router as followersRouter };\n","import { queryDb, runIndependentTransaction } from \"@/db/connect\";\nimport { NextFunction, Request, Response } from \"express\";\n\nclass FollowersController {\n  constructor() {\n    this.followUser = this.followUser.bind(this);\n    this.getFollowers = this.getFollowers.bind(this);\n    this.getUserFollowers = this.getUserFollowers.bind(this);\n    this.getFollowing = this.getFollowing.bind(this);\n    this.getUserFollowing = this.getUserFollowing.bind(this);\n    this.getFollowingsPosts = this.getFollowingsPosts.bind(this);\n    this.getNotifications = this.getNotifications.bind(this);\n    this.unfollowUser = this.unfollowUser.bind(this);\n    this.updateNotificationStatus = this.updateNotificationStatus.bind(this);\n  }\n  async followUser(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { followedId } = req.body;\n      let { followerId } = req.body;\n\n      if (!followedId || isNaN(followedId)) {\n        return res\n          .status(400)\n          .json({ message: \"Valid followedId is required.\" });\n      }\n      followerId = Number(followerId);\n\n      // const followerId = Number(req.body.user.id);\n\n      if (followerId === Number(followedId)) {\n        return res\n          .status(400)\n          .json({ message: \"Users cannot follow themselves.\" });\n      }\n\n      const { rows: existingFollow } = await queryDb(\n        \"SELECT 1 FROM followers WHERE follower_id = $1 AND followed_id = $2\",\n        [followerId, Number(followedId)]\n      );\n\n      if (existingFollow.length > 0) {\n        return res\n          .status(400)\n          .json({ message: \"Already following this user.\" });\n      }\n\n      await runIndependentTransaction([\n        {\n          query:\n            \"INSERT INTO followers (follower_id, followed_id) VALUES ($1, $2)\",\n          params: [followerId, Number(followedId)],\n        },\n        {\n          query:\n            \"UPDATE user_stats SET following = following + 1 WHERE user_id = $1\",\n          params: [followerId],\n        },\n        {\n          query:\n            \"UPDATE user_stats SET followers = followers + 1 WHERE user_id = $1\",\n          params: [Number(followedId)],\n        },\n        {\n          query:\n            \"INSERT INTO follow_notifications (user_id, actor_id, action_type) VALUES ($1, $2, $3)\",\n          params: [Number(followedId), followerId, \"follow\"],\n        },\n      ]);\n\n      res.status(201).json({ message: \"User followed successfully.\" });\n    } catch (error: any) {\n      console.log(error.message);\n\n      if (error.constraint === \"followers_follower_id_fkey\") {\n        return res.status(400).json({ message: \"Follower does not exist.\" });\n      }\n      if (error.code === \"23503\") {\n        console.error(\n          \"Foreign key violation: The followed user does not exist.\"\n        );\n\n        res.status(400).json({\n          message: \"The followed user does not exist.\",\n        });\n      }\n\n      next(error);\n    }\n  }\n\n  async unfollowUser(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { followedId } = req.body;\n\n      if (!followedId || isNaN(followedId)) {\n        return res\n          .status(400)\n          .json({ message: \"Valid followedId is required.\" });\n      }\n\n      const followerId = Number(req.body.user.id);\n\n      if (followerId === Number(followedId)) {\n        return res\n          .status(400)\n          .json({ message: \"Users cannot follow and unfollow themselves.\" });\n      }\n\n      const { rows: existingFollow } = await queryDb(\n        \"SELECT 1 FROM followers WHERE follower_id = $1 AND followed_id = $2\",\n        [followerId, Number(followedId)]\n      );\n\n      if (existingFollow.length < 1) {\n        return res\n          .status(400)\n          .json({ message: \"You doesn't follow this user\" });\n      }\n\n      await runIndependentTransaction([\n        {\n          query:\n            \"DELETE FROM followers WHERE follower_id =$1 AND followed_id=$2\",\n          params: [followerId, Number(followedId)],\n        },\n        {\n          query:\n            \"UPDATE user_stats SET following = following - 1 WHERE user_id = $1\",\n          params: [followerId],\n        },\n        {\n          query:\n            \"UPDATE user_stats SET followers = followers - 1 WHERE user_id = $1\",\n          params: [Number(followedId)],\n        },\n        {\n          query:\n            \"DELETE FROM follow_notifications WHERE user_id = $1 AND actor_id = $2\",\n          params: [Number(followedId), followerId],\n        },\n      ]);\n\n      res.status(201).json({ message: \"User un-followed successfully.\" });\n    } catch (error: any) {\n      if (error.code === \"23503\") {\n        return res.status(400).json({\n          message: \"The user you're trying to unfollow does not exist.\",\n        });\n      }\n      next(error);\n    }\n  }\n\n  async getUserFollowers(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { userId } = req.query;\n      if (!userId || isNaN(userId as any)) {\n        return res.status(400).json({ message: \"User ID is required.\" });\n      }\n\n      const { rows: followers } = await queryDb(\n        `\n       WITH user_followers AS (\n            SELECT \n                follower_id, \n                followed_id\n            FROM followers\n            WHERE followed_id = $1\n        )\n          SELECT \n              u.id, \n              u.username, \n              u.name, \n              u.avatar,\n              EXISTS (\n                  SELECT 1 \n                  FROM followers f_f\n                  WHERE f_f.follower_id = $2 \n                    AND f_f.followed_id = uf.follower_id\n              ) AS current_user_follow\n          FROM user_followers uf\n          INNER JOIN users u \n              ON u.id = uf.follower_id;\n        `,\n        [Number(userId), req.body.user.id]\n      );\n\n      res.status(200).json(followers);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getFollowers(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.body.user.id;\n\n      const { rows: followers } = await queryDb(\n        `\n       WITH user_followers AS (\n            SELECT \n                follower_id, \n                followed_id\n            FROM followers\n            WHERE followed_id = $1\n        )\n          SELECT \n              u.id, \n              u.username, \n              u.name, \n              u.avatar,\n              EXISTS (\n                  SELECT 1 \n                  FROM followers f_f\n                  WHERE f_f.follower_id = $1 \n                    AND f_f.followed_id = uf.follower_id\n              ) AS current_user_follow\n          FROM user_followers uf\n          INNER JOIN users u \n              ON u.id = uf.follower_id;\n\n        `,\n        [userId]\n      );\n\n      res.status(200).json(followers);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getFollowingsPosts(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.body.user.id;\n      const { pageSize, lastId } = req.query;\n\n      const { rows: followingsPosts } = await queryDb(\n        `\n         WITH user_followings AS (\n              SELECT \n                  follower_id, \n                  followed_id\n              FROM followers\n              WHERE follower_id = $1\n          ),\n          user_followings_posts AS (\n              SELECT \n                  p.id,\n                  p.title,\n                  p.thumbnail,\n                  p.slug,\n                  p.created_at,\n                  p.squad_id,\n                  p.tags,\n                  p.author_id\n              FROM posts p\n              INNER JOIN user_followings u_f ON p.author_id = u_f.followed_id\n              where p.id > $3\n              ORDER BY p.id asc\n              LIMIT $2\n          )\n          SELECT \n              p.id,\n              p.title,\n              p.thumbnail,\n              p.tags,\n              p.slug,\n              p.created_at,\n              p_v.upvotes AS upvotes,\n              p_vw.views AS views,\n              JSON_BUILD_OBJECT(\n                  'squad_thumbnail', p_sq.thumbnail,\n                  'squad_handle', p_sq.squad_handle\n              ) AS squad_details,\n              JSON_BUILD_OBJECT(\n                  'author_avatar', u.avatar,\n                  'author_name', u.name,\n                  'author_username', u.username,\n                  'author_id', u.id\n              ) AS author_details,\n              EXISTS (\n                  SELECT 1 \n                  FROM user_upvotes u_u_v \n                  WHERE u_u_v.user_id = $1 \n                    AND u_u_v.post_id = p.id\n              ) AS current_user_upvoted\n          FROM user_followings_posts p\n          INNER JOIN post_upvotes p_v \n              ON p.id = p_v.post_id\n          INNER JOIN post_views p_vw \n              ON p.id = p_vw.post_id\n          INNER JOIN squads p_sq \n              ON p.squad_id = p_sq.id\n          INNER JOIN users u \n              ON p.author_id = u.id;\n        `,\n        [userId, pageSize ? Number(pageSize) : 8, lastId ? Number(lastId) : 0]\n      );\n\n      res.status(200).json({ posts: followingsPosts });\n    } catch (error) {\n      next(error);\n    }\n  }\n  async getUserFollowing(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { userId } = req.query;\n      if (!userId || isNaN(userId as any)) {\n        return res.status(400).json({ message: \"User ID is required.\" });\n      }\n\n      const { rows: followings } = await queryDb(\n        `\n          WITH user_followings AS (\n            SELECT follower_id, followed_id\n            FROM followers\n            WHERE follower_id = $1\n          )\n          SELECT u.id, u.username, u.name, u.avatar,\n           EXISTS (\n                  SELECT 1 \n                  FROM followers f_f\n                  WHERE f_f.follower_id = $2 \n                    AND f_f.followed_id = uf.followed_id\n              ) AS current_user_follow\n          FROM user_followings uf\n          INNER JOIN users u ON u.id = uf.followed_id\n        `,\n        [Number(userId), req.body.user.id]\n      );\n\n      res.status(200).json(followings);\n    } catch (error) {\n      next(error);\n    }\n  }\n  async getFollowing(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.body.user.id;\n\n      const { rows: followings } = await queryDb(\n        `\n          WITH user_followings AS (\n            SELECT follower_id, followed_id\n            FROM followers\n            WHERE follower_id = $1\n          )\n          SELECT u.id, u.username, u.name, u.avatar\n          FROM user_followings uf\n          INNER JOIN users u ON u.id = uf.followed_id\n        `,\n        [userId]\n      );\n\n      res.status(200).json(followings);\n    } catch (error) {\n      next(error);\n    }\n  }\n  async updateNotificationStatus(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const userId = req.body.user.id;\n\n      const query = `\n        UPDATE follow_notifications\n        SET is_read = True\n        WHERE  user_id = $1\n        RETURNING id;\n      `;\n\n      const { rows } = await queryDb(query, [userId]);\n\n      if (rows.length === 0) {\n        return res.status(404).json({\n          message: \"Notification not found or does not belong to the user.\",\n        });\n      }\n\n      return res.status(200).json({\n        message: \"Notification status updated successfully.\",\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getNotifications(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.body.user.id;\n\n      const { rows: notifications } = await queryDb(\n        `\n        WITH user_notifications AS (\n            SELECT * \n            FROM follow_notifications f_n\n            WHERE f_n.user_id = $1\n        )\n          SELECT\n              n.*,\n              JSON_BUILD_OBJECT(\n                  'username', u.username,\n                  'avatar', u.avatar,\n                  'name', u.name\n              ) AS actor_details\n          FROM user_notifications n\n          INNER JOIN users u ON u.id = n.actor_id;\n\n        `,\n        [userId]\n      );\n\n      res.status(200).json(notifications);\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport const followersController = new FollowersController();\n","import { env } from \"@/common/utils/envConfig\";\nimport { app, logger } from \"@/server\";\n\nconst server = app.listen(env.PORT, () => {\n  const { NODE_ENV, HOST, PORT } = env;\n  logger.info(`Server (${NODE_ENV}) running on port http://${HOST}:${PORT}`);\n});\n\nconst onCloseSignal = () => {\n  logger.info(\"sigint received, shutting down\");\n  server.close(() => {\n    logger.info(\"server closed\");\n    process.exit();\n  });\n  setTimeout(() => process.exit(1), 10000).unref(); // Force shutdown after 10s\n};\n\nprocess.on(\"SIGINT\", onCloseSignal);\nprocess.on(\"SIGTERM\", onCloseSignal);\n"],"mappings":";AAAA,OAAO,YAAY;AACnB,SAAS,UAAU,MAAM,KAAK,MAAM,KAAK,UAAU,WAAW;AAE9D,OAAO,OAAO;AAEP,IAAM,MAAM,SAAS,QAAQ,KAAK;AAAA,EACvC,UAAU,IAAI;AAAA,IACZ,YAAY,SAAS,MAAM;AAAA,IAC3B,SAAS,CAAC,eAAe,cAAc,MAAM;AAAA,EAC/C,CAAC;AAAA,EACD,MAAM,KAAK,EAAE,YAAY,SAAS,WAAW,EAAE,CAAC;AAAA,EAChD,MAAM,KAAK,EAAE,YAAY,SAAS,GAAI,EAAE,CAAC;AAAA,EACzC,aAAa,IAAI,EAAE,YAAY,SAAS,uBAAuB,EAAE,CAAC;AAAA,EAClE,eAAe,IAAI,EAAE,YAAY,SAAS,uBAAuB,EAAE,CAAC;AAAA,EACpE,gCAAgC,IAAI,EAAE,YAAY,SAAS,GAAI,EAAE,CAAC;AAAA,EAClE,6BAA6B,IAAI,EAAE,YAAY,SAAS,GAAI,EAAE,CAAC;AAAA,EAC/D,cAAc,IAAI,EAAE,YAAY,SAAS,uBAAuB,EAAE,CAAC;AAAA,EACnE,WAAW,IAAI,EAAE,YAAY,SAAS,uBAAuB,EAAE,CAAC;AAAA,EAChE,eAAe,KAAK,EAAE,YAAY,SAAS,WAAW,EAAE,CAAC;AAAA,EACzD,eAAe,KAAK,EAAE,YAAY,SAAS,GAAI,EAAE,CAAC;AAAA,EAClD,eAAe,IAAI,EAAE,YAAY,SAAS,MAAM,EAAE,CAAC;AAAA,EACnD,mBAAmB,IAAI,EAAE,YAAY,SAAS,UAAU,EAAE,CAAC;AAAA,EAC3D,eAAe,IAAI,EAAE,YAAY,SAAS,MAAM,EAAE,CAAC;AAAA,EACnD,YAAY,IAAI,EAAE,YAAY,SAAS,QAAQ,EAAE,CAAC;AAAA,EAClD,0BAA0B,IAAI,EAAE,YAAY,SAAS,QAAQ,EAAE,CAAC;AAAA,EAChE,yBAAyB,IAAI,EAAE,YAAY,SAAS,QAAQ,EAAE,CAAC;AAAA,EAC/D,kBAAkB,IAAI,EAAE,YAAY,SAAS,QAAQ,EAAE,CAAC;AAAA,EACxD,sBAAsB,IAAI,EAAE,YAAY,SAAS,QAAQ,EAAE,CAAC;AAAA,EAC5D,kBAAkB,IAAI,EAAE,YAAY,SAAS,MAAM,EAAE,CAAC;AAAA,EACtD,gBAAgB,IAAI,EAAE,YAAY,SAAS,MAAM,EAAE,CAAC;AAAA,EACpD,sBAAsB,IAAI,EAAE,YAAY,SAAS,UAAU,EAAE,CAAC;AAChE,CAAC;;;AC/BD,OAAO,UAAU;AACjB,OAAOA,cAA+B;AACtC,OAAO,YAAY;AACnB,SAAS,YAAY;;;ACHrB,OAAOC,cAA2D;AAClE,OAAO,eAAe;;;ACDtB;AAAA,EACE,mBAAAC;AAAA,EACA;AAAA,OACK;;;ACHP,SAAS,uBAAuB;AAChC,OAAO,aAA2D;AAClE,SAAS,KAAAC,UAAS;;;ACFlB,SAAS,eAAAC,oBAAmB;;;ACA5B,SAAS,mBAAmB;AAC5B,SAAS,SAAS;AAEX,IAAM,kBAAN,MAAM,iBAA0B;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,SAAkB,SAAiB,gBAAmB,YAAoB;AAC5F,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,YAAY,IAAI;AACzF,WAAO,IAAI,iBAAgB,MAAM,SAAS,gBAAgB,UAAU;AAAA,EACtE;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,YAAY,aAAa;AAClG,WAAO,IAAI,iBAAgB,OAAO,SAAS,gBAAgB,UAAU;AAAA,EACvE;AACF;AAEO,IAAM,wBAAwB,CAAyB,eAC5D,EAAE,OAAO;AAAA,EACP,SAAS,EAAE,QAAQ;AAAA,EACnB,SAAS,EAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,EAAE,OAAO;AACvB,CAAC;;;AD1BI,SAAS,kBAAkB,QAAsB,aAAqB,aAAaC,aAAY,IAAI;AACxG,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,sBAAsB,MAAM;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AEfA,SAAS,eAAAC,oBAAmB;AAKrB,IAAM,wBAAwB,CAAC,iBAAuC,aAAuB;AAClG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;;;AHAO,IAAM,sBAAsB,IAAI,gBAAgB;AAChD,IAAM,oBAA4B,QAAQ,OAAO;AAExD,oBAAoB,aAAa;AAAA,EAC/B,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,cAAc;AAAA,EACrB,WAAW,kBAAkBC,GAAE,KAAK,GAAG,SAAS;AAClD,CAAC;AAED,kBAAkB,IAAI,KAAK,CAAC,MAAe,QAAkB;AAC3D,QAAM,kBAAkB,gBAAgB,QAAQ,sBAAsB,IAAI;AAC1E,SAAO,sBAAsB,iBAAiB,GAAG;AACnD,CAAC;;;ADdM,SAAS,0BAA0B;AACxC,QAAM,WAAW,IAAIC,iBAAgB,CAAC,mBAAmB,CAAC;AAC1D,QAAM,YAAY,IAAI,mBAAmB,SAAS,WAAW;AAE7D,SAAO,UAAU,iBAAiB;AAAA,IAChC,SAAS;AAAA,IACT,MAAM;AAAA,MACJ,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,EACF,CAAC;AACH;;;ADbO,IAAM,gBAAwBC,SAAQ,OAAO;AACpD,IAAM,kBAAkB,wBAAwB;AAEhD,cAAc,IAAI,iBAAiB,CAAC,MAAe,QAAkB;AACnE,MAAI,UAAU,gBAAgB,kBAAkB;AAChD,MAAI,KAAK,eAAe;AAC1B,CAAC;AAED,cAAc,IAAI,KAAK,UAAU,OAAO,UAAU,MAAM,eAAe,CAAC;;;AMZxE,SAAS,eAAAC,oBAAmB;AAE5B,IAAM,oBAAoC,CAAC,MAAM,QAAQ;AACvD,MAAI,WAAWA,aAAY,SAAS;AACtC;AAEA,IAAM,uBAA4C,CAAC,KAAK,MAAM,KAAK,SAAS;AAC1E,MAAI,OAAO,MAAM;AACjB,OAAK,GAAG;AACV;AAEO,IAAM,kBAAuC,CAAC,KAAK,MAAM,KAAK,SAAS;AAC5E,QAAM,SAAS,IAAI,UAAU;AAC7B,QAAM,UAAU,IAAI,WAAW;AAC/B,SAAO,IAAI,OAAO,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;AAC5C;AAEA,IAAO,uBAAQ,MAAM,CAAC,mBAAmB,oBAAoB;;;AClB7D,SAAS,kBAAkB;AAG3B,SAAS,eAAAC,cAAa,uBAAuB;AAE7C,SAAiD,gBAAgB;AAqBjE,IAAM,gBAAgB,CAAC,YAAwC;AAC7D,QAAM,cAAuB;AAAA,IAC3B,SAAS,IAAI;AAAA,IACb;AAAA,IACA,QAAQ,CAAC;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,uBAAuB,CAAC,QAAQ,qBAAqB,IAAI,MAAM;AAAA,IAC/D,oBAAoB,CAAC,MAAM,QAAQ,qCAAqC,IAAI,UAAU;AAAA,IACtF;AAAA,IACA,GAAG;AAAA,EACL;AACA,SAAO,CAAC,wBAAwB,SAAS,WAAW,CAAC;AACvD;AAEA,IAAM,sBAA2C;AAAA,EAC/C,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,cAAc;AAChB;AAEA,IAAM,cAAc,CAAC,KAAc,SAAoC;AAAA,EACrE,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO,IAAI,OAAO;AAAA,EAClB,cAAc,IAAI,OAAO;AAC3B;AAEA,IAAM,yBAAyC,CAAC,MAAM,KAAK,SAAS;AAClE,QAAM,kBAAkB,CAAC,IAAI;AAC7B,MAAI,iBAAiB;AACnB,UAAM,eAAe,IAAI;AACzB,QAAI,OAAO,CAAC,YAAY;AACtB,UAAI,OAAO,eAAe;AAC1B,UAAI,OAAO;AACX,aAAO,aAAa,KAAK,KAAK,OAAO;AAAA,IACvC;AAAA,EACF;AACA,OAAK;AACP;AAEA,IAAM,iBAAiB,CAAC,MAAuB,KAAsC,QAAiC;AACpH,MAAI,OAAO,IAAI,cAAcC,aAAY,sBAAuB,QAAO;AACvE,MAAI,IAAI,cAAcA,aAAY,YAAa,QAAO;AACtD,MAAI,IAAI,cAAcA,aAAY,iBAAkB,QAAO;AAC3D,SAAO;AACT;AAEA,IAAM,uBAAuB,CAAC,KAAsB,QAAyC;AAC3F,MAAI,IAAI,eAAeA,aAAY,UAAW,QAAO,gBAAgBA,aAAY,SAAS;AAC1F,SAAO,GAAG,IAAI,MAAM;AACtB;AAEA,IAAM,WAAW,CAAC,KAAsB,QAAyC;AAC/E,QAAM,aAAa,IAAI,MAAM,IAAI,QAAQ,cAAc;AACvD,MAAI,WAAY,QAAO;AACvB,QAAM,KAAK,WAAW;AACtB,MAAI,UAAU,gBAAgB,EAAE;AAChC,SAAO;AACT;AAEA,IAAO,wBAAQ,cAAc;;;ACzF7B,SAAS,cAAc;;;ACCvB,OAAO,WAAW;AAClB,SAAS,YAAY;AAEd,IAAM,QAAQ,IAAI,MAAM,IAAI,SAAS;AAErC,IAAM,OAAO,IAAI,KAAK;AAAA,EAC3B,MAAM,IAAI;AAAA,EACV,UAAU,IAAI;AAAA,EACd,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,UAAU;AAAA,EACV,KAAK;AAAA,IACH,oBAAoB;AAAA,EACtB;AACF,CAAC;AAEM,IAAM,UAAU,OAAO,OAAe,SAAgB,CAAC,MAAM;AAClE,QAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,MAAI;AACF,UAAM,SAAS,MAAM,OAAO,MAAM,OAAO,MAAM;AAC/C,WAAO;AAAA,EACT,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAoBO,IAAM,4BAA4B,OACvC,YAIG;AACH,QAAM,SAAS,MAAM,KAAK,QAAQ;AAElC,MAAI;AACF,UAAM,OAAO,MAAM,OAAO;AAE1B,UAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,MAAM,OAAO,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAErE,UAAM,OAAO,MAAM,QAAQ;AAC3B,YAAQ,IAAI,oCAAoC;AAAA,EAClD,SAAS,OAAO;AACd,UAAM,OAAO,MAAM,UAAU;AAC7B,YAAQ,MAAM,uCAAuC,KAAK;AAC1D,UAAM;AAAA,EACR,UAAE;AACA,WAAO,QAAQ;AACf,YAAQ,IAAI,0BAA0B;AAAA,EACxC;AACF;;;AClEA,SAAS,MAAM,cAAc;AAE7B,SAAS,gBAAgB,wBAAwB;AAEjD,OAAO,gBAAgB;AACvB,SAAS,MAAM,eAAe;;;ACN9B,SAAS,aAAa;AAEtB,IAAM,aAAa,IAAI,MAAM,cAAc,EAAE,YAAY,MAAM,CAAC;AAEhE,eAAe,YAAY,OAAe,WAAmB;AAC3D,QAAM,WAAW,IAAI,aAAa,EAAE,OAAO,UAAU,CAAC;AACxD;;;ADGA,IAAM,iBAAN,MAAqB;AAAA,EACnB,cAAc;AACZ,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,8BACH,KAAK,4BAA4B,KAAK,IAAI;AAC5C,SAAK,sBAAsB,KAAK,oBAAoB,KAAK,IAAI;AAAA,EAC/D;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,MAAM,IAAI,IAAI;AAEtB,QAAI,CAAC,OAAO;AACV,aAAO,KAAK,EAAE,SAAS,qBAAqB,QAAQ,IAAI,CAAC;AAAA,IAC3D;AACA,QAAI;AACF,YAAM,EAAE,KAAK,IAAI,MAAM;AAAA,QACrB;AAAA,QACA,CAAC,KAAK;AAAA,MACR;AACA,UAAI,KAAK,SAAS,GAAG;AACnB,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,gBAAgB,CAAC;AAAA,MACvD;AAEA,YAAM,iBAAiB,KAAK,aAAa,KAAe;AACxD,YAAM,OAAY,OAAO,gBAAgB,IAAI,UAAU;AAEvD,UAAI,KAAK,UAAU,KAAK,CAAC,EAAE,OAAO;AAChC,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,kBAAkB,CAAC;AAAA,MACzD;AAEA,YAAM,SAAS,MAAM,KAAK,QAAQ;AAElC,UAAI;AACF,cAAM,OAAO,MAAM,OAAO;AAE1B,cAAM,EAAE,MAAM,QAAQ,IAAI,MAAM,OAAO;AAAA,UACrC;AAAA,UACA,CAAC,MAAM,KAAK,KAAK;AAAA,QACnB;AAEA,YAAI,QAAQ,SAAS,GAAG;AACtB,gBAAM,IAAI,MAAM,oCAAoC;AAAA,QACtD;AAEA,cAAM,SAAS,QAAQ,CAAC,EAAE;AAE1B,cAAM,UAAU;AAAA,UACd;AAAA,YACE,OAAO;AAAA,YACP,QAAQ,CAAC,KAAK,KAAK;AAAA,UACrB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,QAAQ,CAAC,MAAM;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,QAAQ,CAAC,MAAM;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA;AAAA,YAEP,QAAQ,CAAC,MAAM;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,QAAQ,CAAC,MAAM;AAAA,UACjB;AAAA,QACF;AAEA,cAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,MAAM,OAAO,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAErE,cAAM,OAAO,MAAM,QAAQ;AAC3B,YAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,MAClE,SAAS,OAAO;AACd,cAAM,OAAO,MAAM,UAAU;AAC7B,gBAAQ,MAAM,uBAAuB,KAAK;AAC1C,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,wBAAwB,CAAC;AAAA,MAC/D,UAAE;AACA,eAAO,QAAQ;AAAA,MACjB;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,UAAU,KAAK;AAC7B,aAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,wBAAwB,CAAC;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,MAAM,UAAU,KAAc,KAAe,MAAoB;AAC/D,UAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAChC,QAAI,CAAC,SAAS,CAAC,UAAU;AACvB,aAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,6BAA6B,CAAC;AAAA,IACpE;AACA,UAAM,EAAE,KAAK,IAAI,MAAM;AAAA,MACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,CAAC,OAAO,IAAI;AAAA,IACd;AAEA,QAAI,KAAK,SAAS,GAAG;AACnB,aAAO,KAAK,EAAE,SAAS,kBAAkB,QAAQ,IAAI,CAAC;AAAA,IACxD;AAEA,UAAM,sBAAsB,MAAM,KAAK;AAAA,MACrC;AAAA,MACA,KAAK,CAAC,EAAE;AAAA,IACV;AAEA,QAAI,CAAC,qBAAqB;AACxB,aAAO,KAAK,EAAE,SAAS,yBAAyB,QAAQ,IAAI,CAAC;AAAA,IAC/D;AACA,UAAM,EAAE,aAAa,aAAa,IAAI,KAAK;AAAA,MACzC,KAAK,CAAC;AAAA,IACR;AAEA,UAAM,QAAQ,wDAAwD;AAAA,MACpE;AAAA,MACA;AAAA,IACF,CAAC;AAED,QACG,OAAO,eAAe,aAAa;AAAA,MAClC,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC,EACA,OAAO,gBAAgB,cAAc;AAAA,MACpC,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC;AAEH,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,EACjE;AAAA,EAEA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,UAAM,EAAE,MAAM,UAAU,YAAY,OAAO,SAAS,IAAI,IAAI;AAC5D,QAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU;AAC5D,aAAO,KAAK,EAAE,SAAS,8BAA8B,QAAQ,IAAI,CAAC;AAAA,IACpE;AACA,UAAM,OAAO,MAAM,QAAQ,0CAA0C;AAAA,MACnE;AAAA,IACF,CAAC;AACD,QAAI,KAAK,YAAY,KAAK,WAAW,GAAG;AACtC,aAAO,KAAK,EAAE,SAAS,sBAAsB,QAAQ,IAAI,CAAC;AAAA,IAC5D;AAEA,UAAM,YAAY;AAClB,UAAM,oBAAoB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,cAAc,KAAK,mBAAmB,IAAI,YAAY,EAAE,UAAU,CAAC;AACzE,UAAM,QAAQ,KAAK,aAAa,WAAW;AAE3C,UAAM,YAAY,GAAG,IAAI,aAAa,wBAAwB,KAAK;AACnE,UAAM,eAAe,MAAM,KAAK,aAAa,QAAQ;AAErD,QAAI;AACF,YAAM,0BAA0B;AAAA,QAC9B;AAAA,UACE,OAAO;AAAA,UACP,QAAQ,CAAC,OAAO,KAAK;AAAA,QACvB;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,QAAQ;AAAA,YACN;AAAA,YACA,SAAS,MAAM,GAAG,EAAE,KAAK,GAAG;AAAA,YAC5B;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,aAAO,KAAK;AAAA,QACV,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAEA,UAAM,YAAY,OAAO,SAAS;AAElC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,EACzE;AAAA,EAEA,MAAM,oBAAoB,KAAc,KAAe,MAAoB;AACzE,UAAM,OAAO,IAAI;AACjB,QAAI,CAAC,MAAM,OAAO;AAChB,aAAO,KAAK;AAAA,QACV,SACE;AAAA,QACF,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AACA,UAAM,EAAE,MAAM,SAAS,IAAI,MAAM;AAAA,MAC/B;AAAA,MACA,CAAC,KAAK,KAAK;AAAA,IACb;AACA,QAAI,YAAY,WAAW,GAAG;AAC5B,UAAI,KAAK,CAAC,EAAE,aAAa;AACvB,cAAM,EAAE,aAAa,aAAa,IAChC,KAAK,8BAA8B,KAAK,CAAC,CAAC;AAE5C,cAAM,QAAQ,wDAAwD;AAAA,UACpE;AAAA,UACA,KAAK;AAAA,QACP,CAAC;AAED,eAAO,IACJ,OAAO,eAAe,aAAa;AAAA,UAClC,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACZ,CAAC,EACA,OAAO,gBAAgB,cAAc;AAAA,UACpC,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACZ,CAAC,EACA,SAAS,IAAI,WAAW;AAAA,MAC7B,OAAO;AACL,cAAM,EAAE,aAAa,aAAa,IAChC,KAAK,8BAA8B,KAAK,CAAC,CAAC;AAE5C,cAAM;AAAA,UACJ;AAAA,UACA,CAAC,cAAc,MAAM,KAAK,KAAK;AAAA,QACjC;AAEA,eAAO,IACJ,OAAO,eAAe,aAAa;AAAA,UAClC,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACZ,CAAC,EACA,OAAO,gBAAgB,cAAc;AAAA,UACpC,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACZ,CAAC,EACA,SAAS,IAAI,WAAW;AAAA,MAC7B;AAAA,IACF;AACA,UAAM,SAAS,MAAM,KAAK,QAAQ;AAElC,QAAI;AACF,YAAM,OAAO,MAAM,OAAO;AAE1B,YAAM,EAAE,MAAM,SAAS,IAAI,MAAM,OAAO;AAAA,QACtC;AAAA,QACA;AAAA,UACE,KAAK;AAAA,UACL,KAAK,SAAS,MAAM,GAAG,EAAE,KAAK,GAAG;AAAA,UACjC,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,QACF;AAAA,MACF;AAEA,WAAK,KAAK,SAAS,CAAC,EAAE;AAEtB,YAAM,EAAE,aAAa,aAAa,IAChC,KAAK,8BAA8B,IAAI;AAEzC,YAAM,UAAU;AAAA,QACd;AAAA,UACE,OAAO;AAAA,UACP,QAAQ,CAAC,cAAc,KAAK,KAAK;AAAA,QACnC;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,QAAQ,CAAC,KAAK,EAAE;AAAA,QAClB;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,QAAQ,CAAC,KAAK,IAAI,sBAAsB,KAAK,QAAQ,EAAE;AAAA,QACzD;AAAA,QACA;AAAA,UACE,OAAO;AAAA;AAAA,UAEP,QAAQ,CAAC,KAAK,EAAE;AAAA,QAClB;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,QAAQ,CAAC,KAAK,EAAE;AAAA,QAClB;AAAA,MACF;AAEA,YAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,MAAM,OAAO,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAErE,YAAM,OAAO,MAAM,QAAQ;AAE3B,aAAO,IACJ,OAAO,eAAe,aAAa;AAAA,QAClC,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,MACZ,CAAC,EACA,OAAO,gBAAgB,cAAc;AAAA,QACpC,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,MACZ,CAAC,EACA,SAAS,IAAI,WAAW;AAAA,IAC7B,SAAS,OAAO;AACd,YAAM,OAAO,MAAM,UAAU;AAC7B,cAAQ,MAAM,uBAAuB,KAAK;AAC1C,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,wBAAwB,CAAC;AAAA,IAClE,UAAE;AACA,aAAO,QAAQ;AACf,cAAQ,IAAI,0BAA0B;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,iBAAiB,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,KAAK,IAAI,IAAI;AAErB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,IAAI;AAAA,EAClC;AAAA,EAEA,MAAM,4BACJ,KACA,KACA,MACA;AACA,UAAM,EAAE,cAAc,SAAS,IAAI,IAAI;AACvC,QAAI,CAAC,UAAU;AACb,aAAO,KAAK,EAAE,SAAS,2BAA2B,QAAQ,IAAI,CAAC;AAAA,IACjE;AACA,UAAM,EAAE,GAAG,IAAS,OAAO,UAAU,IAAI,wBAAyB;AAClE,QAAI,CAAC,IAAI;AACP,aAAO,KAAK,EAAE,SAAS,yBAAyB,QAAQ,IAAI,CAAC;AAAA,IAC/D;AAEA,UAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,qCAAqC,CAAC,EAAE,CAAC;AAExE,QAAI,KAAK,SAAS,GAAG;AACnB,aAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,IACxD;AAEA,UAAM,EAAE,aAAa,aAAa,IAAI,KAAK;AAAA,MACzC,KAAK,CAAC;AAAA,IACR;AACA,UAAM,QAAQ,oDAAoD;AAAA,MAChE;AAAA,MACA,KAAK,CAAC,EAAE;AAAA,IACV,CAAC;AAED,QACG,OAAO,eAAe,aAAa;AAAA,MAClC,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC,EACA,OAAO,gBAAgB,cAAc;AAAA,MACpC,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC;AAEH,WAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,oDAAoD,CAAC;AAAA,EAC1E;AAAA,EAEA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,QACG,YAAY,gBAAgB;AAAA,MAC3B,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC,EACA,YAAY,eAAe;AAAA,MAC1B,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC,EACA,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,EACrD;AAAA,EAEA,eAAe,CAAC,UAA0B;AACxC,UAAM,MAAM,OAAO,KAAK,kCAAkC;AAC1D,UAAM,YAAY;AAClB,UAAM,aAAa,OAAO,KAAK,kBAAkB;AACjD,UAAM,SAAS,eAAe,WAAW,KAAK,UAAU;AACxD,WAAO,OAAO,OAAO,OAAO,QAAQ,KAAK,IAAI,OAAO,MAAM,KAAK;AAAA,EACjE;AAAA,EAEA,eAAe,CAAC,UAA0B;AACxC,UAAM,MAAM,OAAO,KAAK,kCAAkC;AAC1D,UAAM,YAAY;AAClB,UAAM,aAAa,OAAO,KAAK,kBAAkB;AACjD,UAAM,WAAW,iBAAiB,WAAW,KAAK,UAAU;AAC5D,WAAO,SAAS,OAAO,OAAO,OAAO,MAAM,IAAI,SAAS,MAAM,MAAM;AAAA,EACtE;AAAA,EAEA,eAAe,OAAO,aAAsC;AAC1D,UAAM,eAAe,MAAM,KAAK,UAAU,EAAE;AAE5C,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,OACf,UACA,oBACqB;AACrB,UAAM,sBAAsB,MAAM,QAAQ,UAAU,eAAe;AACnE,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,OAAO,OAAe,cAAsB;AACrD,QAAI;AACF,UAAI,cAAc,WAAW,gBAAgB;AAAA,QAC3C,SAAS;AAAA,QACT,MAAM;AAAA,UACJ,MAAM,OAAO,IAAI,gBAAgB;AAAA,UACjC,MAAM,OAAO,IAAI,oBAAoB;AAAA,QACvC;AAAA,MACF,CAAC;AAED,YAAM,OAAO,MAAM,YAAY,SAAS;AAAA,QACtC,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA;AAAA,mBAEK,SAAS,KAAK,SAAS;AAAA;AAAA,MAEpC,CAAC;AACD,aAAO,EAAE,KAAK;AAAA,IAChB,SAAS,KAAK;AACZ,cAAQ,IAAI,GAAG;AACf,aAAO,EAAE,OAAO,IAAI;AAAA,IACtB;AAAA,EACF;AAAA,EACA,gCAAgC,SAAU,MAAW;AACnD,UAAM,eAAe,KAAK,EAAE,IAAI,KAAK,GAAG,GAAG,IAAI,0BAA0B;AAAA,MACvE,WAAW;AAAA,IACb,CAAC;AACD,UAAM,cAAc;AAAA,MAClB;AAAA,QACE,IAAI,KAAK;AAAA,QACT,UAAU,KAAK;AAAA,QACf,MAAM,KAAK;AAAA,QACX,OAAO,KAAK;AAAA,QACZ,QAAQ,KAAK;AAAA,QACb,YAAY,KAAK;AAAA,MACnB;AAAA,MACA,IAAI;AAAA,MACJ,EAAE,WAAW,KAAK;AAAA,IACpB;AAEA,WAAO,EAAE,cAAc,YAAY;AAAA,EACrC;AACF;AAEO,IAAM,iBAAiB,IAAI,eAAe;;;AE5d1C,SAAS,aAAa,SAAc;AACzC,SAAO,CAAC,KAAc,KAAe,SAAuB;AAC1D,YAAQ,QAAQ,QAAQ,KAAK,KAAK,IAAI,CAAC,EAAE,MAAM,CAAC,QAAQ;AACtD,cAAQ,IAAI,GAAG;AACf,WAAK,GAAG;AAAA,IACV,CAAC;AAAA,EACH;AACF;;;AJNA,OAAO,cAAc;;;AKDrB,OAAO,SAAS;AAEhB,eAAsB,UACpB,KACA,KACA,MACA;AACA,MAAI;AACF,UAAM,EAAE,YAAY,IAAI,IAAI;AAE5B,QAAI,CAAC,aAAa;AAChB,aAAO,KAAK;AAAA,QACV,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAEA,UAAM,OAAO,IAAI,OAAO,aAAa,IAAI,uBAAuB;AAEhE,QAAI,CAAC,MAAM;AACT,aAAO,KAAK;AAAA,QACV,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAEA,QAAI,KAAK,OAAO;AAChB,SAAK;AAAA,EACP,SAAS,OAAO;AACd,WAAO,KAAK;AAAA,MACV,SACE,iBAAiB,IAAI,oBACjB,+CACA;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACF;;;ALjCA,IAAM,SAAS,OAAO;AAEtB,OAAO,IAAI,KAAK,WAAW,aAAa,eAAe,gBAAgB,CAAC;AACxE,OAAO,KAAK,iBAAiB,aAAa,eAAe,YAAY,CAAC;AACtE,OAAO,IAAI,aAAa,aAAa,eAAe,UAAU,CAAC;AAC/D,OAAO,KAAK,UAAU,aAAa,eAAe,SAAS,CAAC;AAC5D,OAAO,KAAK,WAAW,aAAa,eAAe,UAAU,CAAC;AAC9D,OAAO;AAAA,EACL;AAAA,EACA,aAAa,eAAe,2BAA2B;AACzD;AACA,OAAO;AAAA,EACL;AAAA,EACA,SAAS,aAAa,UAAU,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;AAC3D;AACA,OAAO;AAAA,EACL;AAAA,EACA,SAAS,aAAa,UAAU,EAAE,iBAAiB,IAAI,CAAC;AAAA,EACxD,aAAa,eAAe,mBAAmB;AACjD;;;ATbA,OAAO,kBAAkB;AAEzB,OAAO,aAAa;AAGpB,OAAOC,eAAc;AACrB;AAAA,EACE,YAAY;AAAA,OAEP;;;AerBP,SAAS,UAAAC,eAAc;;;ACEvB,OAAO,kBAAkB;AAEzB,SAAS,qBAAqB;AAC9B,SAAS,QAAAC,aAAY;AAGrB,IAAM,oBAAN,MAAwB;AAAA,EACtB,cAAc;AACZ,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;AACnD,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,oBAAoB,KAAK,kBAAkB,KAAK,IAAI;AACzD,SAAK,sBAAsB,KAAK,oBAAoB,KAAK,IAAI;AAC7D,SAAK,oBAAoB,KAAK,kBAAkB,KAAK,IAAI;AAAA,EAC3D;AAAA,EACA,MAAM,eAAe,KAAc,KAAe,MAAoB;AACpE,UAAM,EAAE,SAAS,IAAI,IAAI;AAEzB,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,UAAU,IAAI,KAAK,KAAK,EAAE,CAAC;AAElE,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,MACxD;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,KAAK,CAAC,EAAE,CAAC;AAAA,IAC3C,SAAS,OAAY;AACnB,cAAQ,IAAI,KAAK;AAEjB,UAAI,iBAAiB,eAAe;AAClC,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,uBAAuB,CAAC;AAAA,MAC9D;AAEA,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,MAAM,SAAS,IAAI,IAAI;AAE/B,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,SAAS,EAAE,CAAC;AAEnD,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,MACxD;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,KAAK,CAAC,EAAE,CAAC;AAAA,IAC3C,SAAS,OAAO;AACd,UAAI,iBAAiB,eAAe;AAClC,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,uBAAuB,CAAC;AAAA,MAC9D;AAEA,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,oBAAoB,KAAc,KAAe,MAAoB;AACzE,QAAI;AACF,YAAM,EAAE,OAAO,IAAI,IAAI;AACvB,UAAI,CAAC,UAAU,MAAM,MAAa,GAAG;AACnC,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,MACjE;AACA,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAed,YAAM,EAAE,MAAM,OAAO,IAAI,MAAM,QAAQ,OAAO,CAAC,OAAO,MAAM,CAAC,CAAC;AAC9D,UAAI,OAAO,WAAW,GAAG;AACvB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UAC1B,SAAS;AAAA,UACT,QAAQ,CAAC;AAAA,QACX,CAAC;AAAA,MACH;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,kBAAkB,KAAc,KAAe,MAAoB;AACvE,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAC7B,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAed,YAAM,EAAE,MAAM,OAAO,IAAI,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;AACtD,UAAI,OAAO,WAAW,GAAG;AACvB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UAC1B,SAAS;AAAA,UACT,QAAQ,CAAC;AAAA,QACX,CAAC;AAAA,MACH;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,YAAY,KAAc,KAAe,MAAoB;AACjE,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,IAAI;AAER,QAAI,cAAc,IAAI,QAAQ;AAE9B,QAAI,SAAS;AACX,YAAM,aAAa,IAAI,IAAI,OAAO;AAClC,UACE,WAAW,aAAa,WACxB,WAAW,SAAS,SAAS,WAAW,GACxC;AACA,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,MACjE;AAEA,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAOd,YAAM,SAAS,CAAC,SAAS,IAAI,KAAK,KAAK,EAAE;AAEzC,YAAM,EAAE,MAAM,gBAAgB,IAAI,MAAM,QAAQ,OAAO,MAAM;AAE7D,UAAI,gBAAgB,WAAW,GAAG;AAChC,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,MACxD;AAAA,IACF;AAEA,QACE,aAAa,KAAK,YAClB,WAAW,KAAK,UAChB,SAAS,KAAK,QACd,UAAU,KAAK,SACf,eAAe,KAAK,YACpB;AACA,cAAQ,IAAI,kBAAkB;AAC9B,YAAM,QAAQ;AACd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,IAAI,KAAK,KAAK;AAAA,MAChB,CAAC;AAED,oBAAcC;AAAA,QACZ;AAAA,UACE,IAAI,KAAK;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,QACA,IAAI;AAAA,QACJ,EAAE,WAAW,KAAK;AAAA,MACpB;AAEA,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,MACxD;AAAA,IACF;AAEA,QAAI,OAAO,WAAW,WAAW;AAC/B,cAAQ,IAAI,SAAS;AAErB,YAAM,QAAQ;AACd,YAAM,EAAE,MAAM,UAAU,IAAI,MAAM,QAAQ,OAAO;AAAA,QAC/C,OAAO,GAAG;AAAA,QACV,OAAO,OAAO;AAAA,QACd,OAAO,SAAS;AAAA,QAChB,IAAI,KAAK,KAAK;AAAA,MAChB,CAAC;AAED,UAAI,UAAU,WAAW,GAAG;AAC1B,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,MACxD;AAAA,IACF;AAEA,UAAM,eAAe;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,cAAc,OAAO,QAAQ,YAAY,EAC5C,OAAO,CAAC,CAAC,KAAK,KAAK,MAAM,SAAS,KAAK,kBAAkB,KAAK,KAAK,CAAC,EACpE,IAAI,CAAC,CAAC,KAAK,KAAK,GAAG,WAAW;AAAA,MAC7B,QAAQ;AAAA,MACR;AAAA,MACA,YAAY,QAAQ;AAAA,IACtB,EAAE;AAEJ,YAAQ,IAAI,WAAW;AAEvB,QAAI,YAAY,SAAS,GAAG;AAC1B,cAAQ,IAAI,iBAAiB;AAE7B,YAAM,YAAY,YACf,IAAI,CAAC,EAAE,OAAO,GAAG,UAAU,GAAG,MAAM,OAAO,QAAQ,CAAC,EAAE,EACtD,KAAK,IAAI;AAEZ,YAAM,SAAS,YAAY,IAAI,CAAC,EAAE,MAAM,MAAM,KAAK;AACnD,aAAO,KAAK,IAAI,KAAK,KAAK,EAAE;AAE5B,YAAM,QAAQ;AAAA;AAAA,cAEN,SAAS;AAAA,2BACI,OAAO,MAAM;AAAA;AAAA;AAIlC,YAAM,EAAE,MAAM,gBAAgB,IAAI,MAAM,QAAQ,OAAO,MAAM;AAE7D,UAAI,gBAAgB,WAAW,GAAG;AAChC,eAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,MACxD;AAAA,IACF;AAEA,QACG,OAAO,GAAG,EACV,OAAO,eAAe,aAAa;AAAA,MAClC,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC,EACA,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,EACrD;AAAA,EACA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,QAAI;AACF,YAAM,EAAE,KAAK,IAAI,IAAI;AACrB,YAAM,cAAc,oBAAI,KAAK;AAC7B,YAAM,WAAW,UAAU,KAAK,EAAE;AAElC,UAAI,aAAkB,MAAM,MAAM,IAAI,QAAQ;AAE9C,UAAI,YAAY;AACd,qBAAa,KAAK,MAAM,UAAU;AAAA,MACpC,OAAO;AACL,cAAM,EAAE,KAAK,IAAI,MAAM;AAAA,UACrB;AAAA,UACA,CAAC,KAAK,EAAE;AAAA,QACV;AAEA,YAAI,KAAK,WAAW,GAAG;AACrB,iBAAO,KAAK,EAAE,QAAQ,KAAK,SAAS,iBAAiB,CAAC;AAAA,QACxD;AAEA,qBAAa,KAAK,CAAC;AAEnB,cAAM,MAAM,IAAI,UAAU,KAAK,UAAU,UAAU,GAAG,MAAM,KAAK;AAAA,MACnE;AAEA,YAAM,cAAc,IAAI,KAAK,WAAW,UAAU;AAClD,YAAM,UACJ,YAAY,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,MACtC,YAAY,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAExC,UAAI,SAAS;AACX,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,CAAC,CAAC;AAAA,MAChC;AAEA,YAAM,WAAW,KAAK;AAAA,SACnB,OAAO,WAAW,IAAI,OAAO,WAAW,MAAM,MAAO,KAAK,KAAK;AAAA,MAClE;AAEA,UAAI,OAAO;AAEX,UAAI,WAAW,GAAG;AAChB,cAAM,gBAAgB,KAAK;AAAA,UACzB,WAAW;AAAA,UACX,WAAW;AAAA,QACb;AAEA,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAKR,iBAAS,CAAC,GAAG,aAAa,eAAe,KAAK,EAAE;AAEhD,qBAAa;AAAA,UACX,eAAe;AAAA,UACf,YAAY;AAAA,UACZ,gBAAgB;AAAA,QAClB;AAAA,MACF,OAAO;AACL,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAKR,iBAAS,CAAC,aAAa,KAAK,EAAE;AAE9B,mBAAW,iBAAiB;AAC5B,mBAAW,aAAa;AAAA,MAC1B;AAEA,YAAM,QAAQ,OAAO,MAAM;AAE3B,YAAM,MAAM,IAAI,UAAU,KAAK,UAAU,UAAU,GAAG,MAAM,KAAK;AAEjE,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACxE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,OAAO,IAAI,IAAI;AAEvB,QAAI,CAAC,UAAU,OAAO,WAAW,UAAU;AACzC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AACA,UAAM,kBAAkB,aAAa,QAAQ;AAAA,MAC3C,aAAa,CAAC;AAAA,MACd,mBAAmB,CAAC;AAAA,IACtB,CAAC;AAED,UAAM,QAAQ;AACd,UAAM,SAAS,CAAC,iBAAiB,IAAI,KAAK,KAAK,EAAE;AAEjD,UAAM,QAAQ,OAAO,MAAM;AAE3B,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,MAAcC,MAAa;AAC3C,UAAM,YAAiB;AAAA,MACrB,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,GAAG;AAAA,MACH,SAAS;AAAA,MACT,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAEA,QAAI;AACF,YAAM,YAAY,IAAI,IAAIA,IAAG;AAE7B,aAAO,UAAU,aAAa,YAAY,UAAU,IAAI,IACpD,UAAU,SAAS,SAAS,UAAU,IAAI,CAAC,IAC3C;AAAA,IACN,SAAS,OAAO;AACd,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEO,IAAM,oBAAoB,IAAI,kBAAkB;;;AD3gBvD,IAAMC,UAASC,QAAO;AACtBD,QAAO,IAAI,SAAS;AACpBA,QAAO,IAAI,KAAK,aAAa,kBAAkB,UAAU,CAAC;AAC1DA,QAAO,IAAI,mBAAmB,aAAa,kBAAkB,cAAc,CAAC;AAC5EA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,kBAAkB,iBAAiB;AAClD;AACAA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,kBAAkB,mBAAmB;AACpD;AACAA,QAAO,IAAI,SAAS,aAAa,kBAAkB,WAAW,CAAC;AAC/DA,QAAO,KAAK,mBAAmB,aAAa,kBAAkB,aAAa,CAAC;AAC5EA,QAAO,IAAI,kBAAkB,aAAa,kBAAkB,YAAY,CAAC;;;AErBzE,SAAS,UAAAE,eAAc;;;ACGvB,OAAOC,mBAAkB;AACzB,OAAO,SAAS;AAChB,OAAO,cAAc;AAErB,IAAM,iBAAN,MAAqB;AAAA,EACnB,cAAc;AACZ,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI;AACrD,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;AACnD,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAAA,EAC7D;AAAA,EAEA,UAAU,MAAM;AACdaAAa,CAAC,YAAoB;AAChC,UAAM,iBAAiB,KAAK,QAAQ;AACpC,UAAM,MAAM,IAAI,SAAS,OAAO,CAAC;AACjC,UAAM,QAAQ,IAAI,MAAM,EAAE,IAAI,OAAO;AACrC,UAAM,aAAa,IAAI,WAAW,EAAE,IAAI,OAAO;AAC/C,UAAM,WAAW,IAAI,SAAS,EAAE,IAAI,OAAO;AAC3C,UAAM,UAAU,IAAI,QAAQ,EAAE,IAAI,OAAO;AACzC,UAAM,OAAO;AAAA,MACX,GAAG,oBAAI,IAAI,CAAC,GAAG,OAAO,GAAG,YAAY,GAAG,UAAU,GAAG,OAAO,CAAC;AAAA,IAC/D;AAEA,WAAO,KAAK,OAAO,CAAC,KAAe,YAAiB;AAClD,YAAM,MAAM,eAAe;AAAA,QACzB,QAAQ,YAAY,EAAE,MAAM,GAAG,EAAE,KAAK,GAAG;AAAA,MAC3C;AACA,UAAI,KAAK;AACP,YAAI,KAAK,QAAQ,YAAY,EAAE,MAAM,GAAG,EAAE,KAAK,GAAG,CAAC;AAAA,MACrD;AACA,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AAAA,EACP;AAAA,EAEA,MAAM,SAAS,KAAc,KAAe,MAAoB;AAC9D,UAAM,EAAE,UAAU,QAAQ,aAAa,IAAI,IAAI;AAgB/C,UAAM,uBAAuB,CAAC,MAAM,IAAI,WAAW,OAAO;AAE1D,QAAI,CAAC,qBAAqB,SAAS,OAAO,YAAY,CAAC,GAAG;AACxD,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SACE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,QAAI;AACF,UAAI,QAAQ;AAEZ,UAAI,iBAAiB,QAAQ,iBAAiB,IAAI;AAChD,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CR,cAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,UACpC,IAAI,KAAK,KAAK;AAAA,UACd;AAAA,UACA,WAAW,WAAW;AAAA,QACxB,CAAC;AAED,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,MAC7C;AAEA,UAAI,iBAAiB,WAAW;AAC9B,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CR,cAAM,UAAU,QAAQ,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC;AAC7D,cAAM,SAAS,QAAQ,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC;AAC5D,cAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,UACpC,IAAI,KAAK,KAAK;AAAA,UACd;AAAA,UACA;AAAA,UACA,WAAW,WAAW;AAAA,QACxB,CAAC;AAED,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,MAC7C;AACA,UAAI,iBAAiB,SAAS;AAC5B,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CR,cAAM,QAAQ,QAAQ,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC;AAC3D,cAAM,SAAS,QAAQ,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC;AAE5D,cAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,UACpC,IAAI,KAAK,KAAK;AAAA,UACd;AAAA,UACA;AAAA,UACA,WAAW,WAAW;AAAA,QACxB,CAAC;AAED,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,MAC7C;AAAA,IACF,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,SAAS,IAAI,IAAI;AACzB,QAAI,CAAC,UAAU;AACb,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,yBAAyB,CAAC;AAAA,IACnE;AACA,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,KAAK,KAAK,IAAI,QAAQ,CAAC;AAElE,UAAI,OAAO,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC;AAAA,IAC9B,SAAS,OAAO;AACd,cAAQ,IAAI,sCAAsC;AAClD,cAAQ,IAAI,KAAK;AACjB,cAAQ,IAAI,sCAAsC;AAClD,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,UAAM,EAAE,OAAO,IAAI,IAAI;AACvB,QAAI,CAAC,UAAU,MAAM,MAAa,GAAG;AACnC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AACA,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,OAAO,MAAM,CAAC,CAAC;AAEtD,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,IACtC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;AAExD,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,IACtC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,gBAAgB,KAAc,KAAe,MAAoB;AACrE,UAAM,EAAE,OAAO,IAAI,IAAI;AACvB,UAAM,EAAE,UAAU,WAAW,IAAI,IAAI;AAErC,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqEtB,YAAM,EAAE,MAAM,SAAS,IAAI,MAAM,QAAQ,eAAe;AAAA,QACtD,OAAO,MAAM;AAAA,QACb,IAAI,KAAK,KAAK;AAAA,QACd,WAAW,WAAW;AAAA,QACtB,aAAa,aAAa;AAAA,MAC5B,CAAC;AAED,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC;AAAA,IAC1C,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AACpD,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,iDAAiD,CAAC;AAAA,IACvE;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,OAAO,SAAS,WAAW,MAAM,IAAI,IAAI;AAEjD,QAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO;AAC9C,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,IACvE;AAEA,UAAM,EAAE,MAAM,cAAc,IAAI,MAAM;AAAA,MACpC;AAAA,MACA,CAAC,OAAO,KAAK,GAAG,OAAO,IAAI,KAAK,KAAK,EAAE,CAAC;AAAA,IAC1C;AAEA,QAAI,cAAc,SAAS,GAAG;AAC5B,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,sCAAsC,CAAC;AAAA,IAC5D;AAEA,UAAM,mBAAmBA,cAAa,SAAS;AAAA,MAC7C,aAAa,CAAC;AAAA,MACd,mBAAmB,CAAC;AAAA,IACtB,CAAC;AACD,UAAM,OAAO,KAAK,WAAW,gBAAgB;AAC7C,UAAM,OAAO,MACV,YAAY,EACZ,KAAK,EACL,QAAQ,aAAa,GAAG;AAE3B,UAAM,SAAS,MAAM,KAAK,QAAQ;AAElC,QAAI;AACF,YAAM,OAAO,MAAM,OAAO;AAE1B,YAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAMlB,YAAM,EAAE,MAAM,SAAS,IAAI,MAAM,OAAO,MAAM,WAAW;AAAA,QACvD;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,IAAI,KAAK,KAAK,EAAE;AAAA,QACvB,OAAO,KAAK;AAAA,QACZ;AAAA,QACA;AAAA,MACF,CAAC;AAED,YAAM,SAAS,SAAS,CAAC,EAAE;AAE3B,YAAM,OAAO;AAAA,QACX;AAAA,QACA,CAAC,QAAQ,CAAC;AAAA,MACZ;AAEA,YAAM,OAAO;AAAA,QACX;AAAA,QACA,CAAC,QAAQ,CAAC;AAAA,MACZ;AAEA,YAAM,OAAO,MAAM,QAAQ;AAC3B,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,IAChE,SAAS,OAAO;AACd,YAAM,OAAO,MAAM,UAAU;AAC7B,cAAQ,MAAM,uCAAuC,KAAK;AAC1D,UACG,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,6CAA6C,CAAC;AAAA,IACnE,UAAE;AACA,aAAO,QAAQ;AACf,cAAQ,IAAI,0BAA0B;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,MAAM,SAAS,KAAc,KAAe,MAAoB;AAC9D,UAAM,EAAE,OAAO,IAAI,IAAI;AACvB,UAAM,EAAE,OAAO,QAAQ,IAAI,IAAI;AAE/B,QAAI;AACF,UAAI,SAAS,SAAS;AACpB,cAAM,mBAAmBA,cAAa,SAAS;AAAA,UAC7C,aAAa,CAAC;AAAA,UACd,mBAAmB,CAAC;AAAA,QACtB,CAAC;AACD,cAAM,OAAO,KAAK,WAAW,gBAAgB;AAE7C,cAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQxB,cAAM,EAAE,MAAM,YAAY,IAAI,MAAM,QAAQ,iBAAiB;AAAA,UAC3D;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,CAAC;AAED,YAAI,YAAY,WAAW,GAAG;AAC5B,iBAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,kBAAkB,CAAC;AAAA,QAC5D;AAAA,MACF;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,IAChE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,UAAU,IAAI,IAAI;AAE1B,QAAI,CAAC,WAAW;AACd,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,0BAA0B,CAAC;AAAA,IACpE;AAEA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,EAAE,KAAK,IAAI,MAAM;AAAA,QACrB;AAAA,QACA,CAAC,OAAO,SAAS,GAAG,MAAM;AAAA,MAC5B;AAEA,UAAI,KAAK,SAAS,GAAG;AACnB,cAAM;AAAA,UACJ;AAAA;AAAA,UAEA,CAAC,OAAO,SAAS,GAAG,MAAM;AAAA,QAC5B;AACA,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,kBAAkB,CAAC;AAAA,MAC5D;AACA,YAAM;AAAA,QACJ;AAAA;AAAA,QAEA,CAAC,OAAO,SAAS,GAAG,MAAM;AAAA,MAC5B;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,gCAAgC,CAAC;AAAA,IAC1E,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,gDAAgD,CAAC;AAAA,IACtE;AAAA,EACF;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,OAAO,IAAI,IAAI;AAEvB,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,EAAE,KAAK,IAAI,MAAM;AAAA,QACrB;AAAA,QACA,CAAC,OAAO,MAAM,GAAG,MAAM;AAAA,MACzB;AAEA,UAAI,KAAK,SAAS,GAAG;AACnB,cAAM;AAAA,UACJ;AAAA;AAAA;AAAA,UAGA,CAAC,OAAO,MAAM,CAAC;AAAA,QACjB;AACA,cAAM;AAAA,UACJ;AAAA;AAAA,UAEA,CAAC,OAAO,MAAM,GAAG,MAAM;AAAA,QACzB;AACA,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,kBAAkB,CAAC;AAAA,MAC5D;AAEA,YAAM;AAAA,QACJ;AAAA;AAAA;AAAA,QAGA,CAAC,OAAO,MAAM,CAAC;AAAA,MACjB;AACA,YAAM;AAAA,QACJ;AAAA;AAAA,QAEA,CAAC,OAAO,MAAM,GAAG,MAAM;AAAA,MACzB;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,IACvE,SAAS,OAAO;AACd,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,6CAA6C,CAAC;AAAA,IACnE;AAAA,EACF;AAAA,EACA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,OAAO,IAAI,IAAI;AACvB,UAAM,EAAE,QAAQ,IAAI,IAAI;AAExB,QAAI,CAAC,UAAU,CAAC,SAAS;AACvB,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,oCAAoC,CAAC;AAAA,IAC1D;AAEA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAC7B,YAAM,mBAAmBA,cAAa,SAAS;AAAA,QAC7C,aAAa,CAAC;AAAA,QACd,mBAAmB,CAAC;AAAA,MACtB,CAAC;AAED,YAAM;AAAA,QACJ;AAAA;AAAA,QAEA,CAAC,OAAO,MAAM,GAAG,QAAQ,gBAAgB;AAAA,MAC3C;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACxE,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,8CAA8C,CAAC;AAAA,IACpE;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,UAAU,IAAI,IAAI;AAE1B,QAAI,CAAC,WAAW;AACd,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,0BAA0B,CAAC;AAAA,IACpE;AAEA,QAAI;AACF,YAAM;AAAA,QACJ;AAAA,QACA,CAAC,OAAO,SAAS,GAAG,IAAI,KAAK,KAAK,EAAE;AAAA,MACtC;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,gCAAgC,CAAC;AAAA,IAC1E,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,gDAAgD,CAAC;AAAA,IACtE;AAAA,EACF;AAAA,EACA,MAAM,mBAAmB,KAAc,KAAe,MAAoB;AACxE,UAAM,EAAE,WAAW,QAAQ,IAAI,IAAI;AAEnC,QAAI,CAAC,aAAa,CAAC,SAAS;AAC1B,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,mCAAmC,CAAC;AAAA,IACzD;AAEA,QAAI;AACF,YAAM;AAAA,QACJ;AAAA,QACA,CAAC,OAAO,OAAO,GAAG,OAAO,SAAS,GAAG,IAAI,KAAK,KAAK,EAAE;AAAA,MACvD;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACxE,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,8CAA8C,CAAC;AAAA,IACpE;AAAA,EACF;AAAA,EACA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,SAAS,UAAU,IAAI,IAAI;AAEnC,QAAI,CAAC,aAAa,CAAC,WAAW,QAAQ,KAAK,EAAE,WAAW,GAAG;AACzD,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,6CAA6C,CAAC;AAAA,IACnE;AAEA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,mBAAmBA,cAAa,SAAS;AAAA,QAC7C,aAAa,CAAC;AAAA,QACd,mBAAmB,CAAC;AAAA,MACtB,CAAC;AAED,YAAM,EAAE,SAAS,IAAI,MAAM;AAAA,QACzB;AAAA;AAAA;AAAA,QAGA,CAAC,kBAAkB,OAAO,SAAS,GAAG,MAAM;AAAA,MAC9C;AAEA,UAAI,aAAa,GAAG;AAClB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,iDAAiD,CAAC;AAAA,MACvE;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,gCAAgC,CAAC;AAAA,IAC1E,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,gDAAgD,CAAC;AAAA,IACtE;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,KAAc,KAAe,MAAoB;AACjE,UAAM,EAAE,SAAS,QAAQ,IAAI,IAAI;AAEjC,QAAI,CAAC,WAAW,CAAC,WAAW,QAAQ,KAAK,EAAE,WAAW,GAAG;AACvD,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,2CAA2C,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,mBAAmBA,cAAa,SAAS;AAAA,QAC7C,aAAa,CAAC;AAAA,QACd,mBAAmB,CAAC;AAAA,MACtB,CAAC;AAED,YAAM,EAAE,SAAS,IAAI,MAAM;AAAA,QACzB;AAAA;AAAA;AAAA,QAGA,CAAC,kBAAkB,OAAO,OAAO,GAAG,MAAM;AAAA,MAC5C;AAEA,UAAI,aAAa,GAAG;AAClB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,+CAA+C,CAAC;AAAA,MACrE;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACxE,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAC5C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,8CAA8C,CAAC;AAAA,IACpE;AAAA,EACF;AAAA,EAEA,MAAM,eAAe,KAAc,KAAe,MAAoB;AACpE,UAAM,EAAE,UAAU,IAAI,IAAI;AAC1B,UAAM,EAAE,SAAS,WAAW,IAAI,IAAI;AAEpC,QAAI,CAAC,aAAa,CAAC,WAAW,CAAC,YAAY;AACzC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI;AACF,YAAM,WAAW,IAAI,KAAK,KAAK;AAC/B,UAAI,eAAe,UAAU;AAC3B,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,sCAAsC,CAAC;AAAA,MAC5D;AAEA,YAAM,mBAAmBA,cAAa,SAAS;AAAA,QAC7C,aAAa,CAAC;AAAA,QACd,mBAAmB,CAAC;AAAA,MACtB,CAAC;AAED,YAAM;AAAA,QACJ;AAAA;AAAA,QAEA,CAAC,OAAO,SAAS,GAAG,UAAU,OAAO,UAAU,GAAG,gBAAgB;AAAA,MACpE;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAAA,IACtE,SAAS,OAAO;AACd,cAAQ,MAAM,8BAA8B,KAAK;AACjD,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,4CAA4C,CAAC;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,MAAM,SAAS,KAAc,KAAe,MAAoB;AAC9D,UAAM,EAAE,OAAO,IAAI,IAAI;AAEvB,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,EAAE,KAAK,IAAI,MAAM;AAAA,QACrB;AAAA,QACA,CAAC,OAAO,MAAM,GAAG,MAAM;AAAA,MACzB;AAEA,UAAI,KAAK,SAAS,GAAG;AACnB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,CAAC,CAAC;AAAA,MAChC;AAEA,YAAM;AAAA,QACJ;AAAA;AAAA;AAAA,QAGA,CAAC,OAAO,MAAM,CAAC;AAAA,MACjB;AACA,YAAM;AAAA,QACJ;AAAA;AAAA,QAEA,CAAC,OAAO,MAAM,GAAG,MAAM;AAAA,MACzB;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAAA,IACtE,SAAS,OAAO;AACd,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,6CAA6C,CAAC;AAAA,IACnE;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,OAAO,IAAI,IAAI;AAEvB,QAAI;AACF,YAAM,kBAAkB;AAAA;AAAA;AAGxB,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,iBAAiB;AAAA,QAC9C;AAAA,QACA,IAAI,KAAK,KAAK;AAAA,MAChB,CAAC;AAED,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,kBAAkB,CAAC;AAAA,MAC5D;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,IAChE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AACF;AAEO,IAAM,iBAAiB,IAAI,eAAe;;;AD98BjD,IAAMC,UAASC,QAAO;AAEtBD,QAAO,IAAI,SAAS;AACpBA,QAAO,IAAI,KAAK,aAAa,eAAe,QAAQ,CAAC;AACrDA,QAAO,IAAI,iBAAiB,aAAa,eAAe,UAAU,CAAC;AACnEA,QAAO,IAAI,mBAAmB,aAAa,eAAe,YAAY,CAAC;AACvEA,QAAO,IAAI,iBAAiB,aAAa,eAAe,aAAa,CAAC;AAEtEA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,eAAe,eAAe;AAC7C;AACAA,QAAO,KAAK,WAAW,aAAa,eAAe,UAAU,CAAC;AAE9DA,QAAO,KAAK,oBAAoB,aAAa,eAAe,aAAa,CAAC;AAC1EA,QAAO,KAAK,qBAAqB,aAAa,eAAe,cAAc,CAAC;AAE5EA,QAAO,IAAI,mBAAmB,aAAa,eAAe,aAAa,CAAC;AACxEA,QAAO,IAAI,iBAAiB,aAAa,eAAe,WAAW,CAAC;AACpEA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,eAAe,aAAa;AAC3C;AACAA,QAAO,IAAI,YAAY,aAAa,eAAe,QAAQ,CAAC;AAC5DA,QAAO,IAAI,mBAAmB,aAAa,eAAe,UAAU,CAAC;AACrEA,QAAO,IAAI,iBAAiB,aAAa,eAAe,QAAQ,CAAC;AAEjEA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,eAAe,aAAa;AAC3C;AACAA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,eAAe,kBAAkB;AAChD;AACAA,QAAO,OAAO,wBAAwB,aAAa,eAAe,UAAU,CAAC;;;AExC7E,SAAS,UAAAE,eAAc;;;ACIhB,IAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,kBAAN,MAAsB;AAAA,EACpB,cAAc;AACZ,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI;AACrD,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAAA,EACjD;AAAA,EAEA,MAAM,UAAU,KAAc,KAAe,MAAoB;AAC/D,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,KAAK;AACpC,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,QAAQ,KAAK,CAAC;AAAA,IACvC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,gBAAgB,KAAc,KAAe,MAAoB;AACrE,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAKd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,KAAK;AACpC,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,KAAK,CAAC;AAAA,IACxC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,KAAc,KAAe,MAAoB;AACjE,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,IAAI;AAER,QAAI,CAAC,QAAQ,CAAC,cAAc;AAC1B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI,CAAC,gBAAgB,SAAS,QAAQ,GAAG;AACvC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI;AACF,YAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASzB,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,kBAAkB;AAAA,QAC/C;AAAA,QACA,aAAa,KAAK,EAAE,MAAM,GAAG,EAAE,KAAK,EAAE;AAAA,QACtC,eAAe;AAAA,QACf,YAAY;AAAA,QACZ,cAAc,SAAY,YAAY;AAAA,QACtC,IAAI,KAAK,KAAK;AAAA,QACd,4BAA4B;AAAA,QAC5B,yBAAyB;AAAA,QACzB,0BAA0B;AAAA,MAC5B,CAAC;AAED,YAAM;AAAA,QACJ;AAAA;AAAA;AAAA,QAGA,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,KAAK,KAAK,IAAI,OAAO;AAAA,MACxC;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB,SAAS;AAAA,MACX,CAAC;AAAA,IACH,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,UAAU,OAAO,IAAI,IAAI;AACjC,UAAM,EAAE,SAAS,IAAI,IAAI;AAEzB,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC;AAAA,QACA,OAAO,QAAQ;AAAA,QACf,WAAW,WAAW;AAAA,MACxB,CAAC;AAED,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,IAC7C,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,UAAM,EAAE,aAAa,IAAI,IAAI;AAC7B,UAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,QAAI,CAAC,cAAc;AACjB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAAA,IACtE;AAEA,UAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiEd,UAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,cAAc,MAAM,CAAC;AAC5D,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC;AAAA,EACrC;AAAA,EACA,MAAM,SAAS,KAAc,KAAe,MAAoB;AAC9D,UAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAad,QAAI;AACF,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;AAExD,UAAI,OAAO,GAAG,EAAE,KAAK,IAAI;AAAA,IAC3B,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,UAAU,KAAc,KAAe,MAAoB;AAC/D,UAAM,EAAE,cAAc,SAAS,IAAI,IAAI;AAEvC,QAAI,CAAC,gBAAgB,CAAC,UAAU;AAC9B,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,oCAAoC,CAAC;AAAA,IAC1D;AAEA,UAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYd,QAAI;AACF,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,UAAU,IAAI,KAAK,KAAK,EAAE,CAAC;AAElE,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,MACrD;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,gCAAgC,CAAC;AAAA,IACnE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,SAAS,IAAI,IAAI;AAEzB,QAAI,CAAC,UAAU;AACb,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,wBAAwB,CAAC;AAAA,IAClE;AAEA,UAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,UAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAMd,QAAI;AACF,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,UAAU,MAAM,CAAC;AAExD,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,sCAAsC,CAAC;AAAA,MAC5D;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACjE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,KAAc,KAAe,MAAoB;AACjE,UAAM,EAAE,cAAc,SAAS,IAAI,IAAI;AACvC,QAAI,CAAC,cAAc;AACjB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAAA,IACtE;AACA,UAAM;AAAA,MACJ;AAAA,MACA,cAAc;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,IAAI;AAER,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,mBAAmB,CAAC;AAAA,MAC7D;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACjE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,KAAc,KAAe,MAAoB;AACjE,UAAM,EAAE,SAAS,IAAI,IAAI;AAEzB,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAGd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,OAAO,QAAQ,CAAC,CAAC;AAExD,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,mBAAmB,CAAC;AAAA,MAC7D;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACjE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,UAAU,KAAc,KAAe,MAAoB;AAC/D,UAAM,EAAE,SAAS,IAAI,IAAI;AACzB,UAAM,EAAE,QAAQ,IAAI,IAAI;AAExB,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAMd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC,OAAO,QAAQ;AAAA,QACf,OAAO,OAAO;AAAA,MAChB,CAAC;AAED,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,mCAAmC,CAAC;AAAA,MACzD;AAEA,UACG,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,wBAAwB,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC;AAAA,IAC9D,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,KAAc,KAAe,MAAoB;AACnE,UAAM,EAAE,SAAS,IAAI,IAAI;AACzB,UAAM,EAAE,QAAQ,IAAI,IAAI;AAExB,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAMd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC,OAAO,QAAQ;AAAA,QACf,OAAO,OAAO;AAAA,MAChB,CAAC;AAED,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,mCAAmC,CAAC;AAAA,MACzD;AAEA,UACG,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,wBAAwB,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC;AAAA,IAC9D,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,UAAM,EAAE,SAAS,IAAI,IAAI;AACzB,UAAM,EAAE,QAAQ,IAAI,IAAI;AAExB,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAMd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC,OAAO,QAAQ;AAAA,QACf,OAAO,OAAO;AAAA,MAChB,CAAC;AAED,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,mCAAmC,CAAC;AAAA,MACzD;AAEA,UACG,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,wBAAwB,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC;AAAA,IAC9D,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,UAAM,EAAE,SAAS,IAAI,IAAI;AACzB,UAAM,EAAE,QAAQ,IAAI,IAAI;AAExB,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,IACjE;AAEA,QAAI;AACF,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAKd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO;AAAA,QACpC,OAAO,QAAQ;AAAA,QACf,OAAO,OAAO;AAAA,MAChB,CAAC;AAED,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,mCAAmC,CAAC;AAAA,MACzD;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,IAChE,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AACF;AAEO,IAAM,kBAAkB,IAAI,gBAAgB;;;ACthBnD,eAAsB,aACpB,KACA,KACA,MACA;AACA,QAAM,OAAO,IAAI,KAAK;AACtB,QAAM,EAAE,SAAS,IAAI,IAAI;AAEzB,MAAI,CAAC,UAAU;AACb,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,wBAAwB,CAAC;AAAA,EAClE;AAEA,QAAM,EAAE,KAAK,IAAI,MAAM;AAAA,IACrB;AAAA,IACA,CAAC,OAAO,QAAQ,GAAG,KAAK,IAAI,OAAO;AAAA,EACrC;AACA,MAAI,KAAK,SAAS,GAAG;AACnB,WAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,sCAAsC,CAAC;AAAA,EAC5D;AACA,OAAK;AACP;;;AFpBA,IAAMC,UAASC,QAAO;AAEtBD,QAAO,IAAI,SAAS;AACpBA,QAAO,KAAK,WAAW,aAAa,gBAAgB,WAAW,CAAC;AAChEA,QAAO,IAAI,OAAO,aAAa,gBAAgB,QAAQ,CAAC;AACxDA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,gBAAgB,YAAY;AAC3C;AAEAA,QAAO,IAAI,oBAAoB,aAAa,gBAAgB,aAAa,CAAC;AAC1EA,QAAO,IAAI,KAAK,aAAa,gBAAgB,SAAS,CAAC;AACvDA,QAAO,IAAI,SAAS,aAAa,gBAAgB,SAAS,CAAC;AAC3DA,QAAO,IAAI,UAAU,aAAa,gBAAgB,UAAU,CAAC;AAI7DA,QAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,aAAa,gBAAgB,WAAW;AAC1C;AAEAA,QAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,aAAa,gBAAgB,SAAS;AACxC;AACAA,QAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,aAAa,gBAAgB,aAAa;AAC5C;AACAA,QAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,aAAa,gBAAgB,UAAU;AACzC;AACAA,QAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,aAAa,gBAAgB,YAAY;AAC3C;AACAA,QAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,aAAa,gBAAgB,WAAW;AAC1C;;;AGrDA,SAAS,UAAAE,eAAc;;;ACGvB,IAAM,sBAAN,MAA0B;AAAA,EACxB,cAAc;AACZ,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAC3D,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,2BAA2B,KAAK,yBAAyB,KAAK,IAAI;AAAA,EACzE;AAAA,EACA,MAAM,WAAW,KAAc,KAAe,MAAoB;AAChE,QAAI;AACF,YAAM,EAAE,WAAW,IAAI,IAAI;AAC3B,UAAI,EAAE,WAAW,IAAI,IAAI;AAEzB,UAAI,CAAC,cAAc,MAAM,UAAU,GAAG;AACpC,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,gCAAgC,CAAC;AAAA,MACtD;AACA,mBAAa,OAAO,UAAU;AAI9B,UAAI,eAAe,OAAO,UAAU,GAAG;AACrC,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,kCAAkC,CAAC;AAAA,MACxD;AAEA,YAAM,EAAE,MAAM,eAAe,IAAI,MAAM;AAAA,QACrC;AAAA,QACA,CAAC,YAAY,OAAO,UAAU,CAAC;AAAA,MACjC;AAEA,UAAI,eAAe,SAAS,GAAG;AAC7B,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,MACrD;AAEA,YAAM,0BAA0B;AAAA,QAC9B;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,YAAY,OAAO,UAAU,CAAC;AAAA,QACzC;AAAA,QACA;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,UAAU;AAAA,QACrB;AAAA,QACA;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,OAAO,UAAU,CAAC;AAAA,QAC7B;AAAA,QACA;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,OAAO,UAAU,GAAG,YAAY,QAAQ;AAAA,QACnD;AAAA,MACF,CAAC;AAED,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,8BAA8B,CAAC;AAAA,IACjE,SAAS,OAAY;AACnB,cAAQ,IAAI,MAAM,OAAO;AAEzB,UAAI,MAAM,eAAe,8BAA8B;AACrD,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,2BAA2B,CAAC;AAAA,MACrE;AACA,UAAI,MAAM,SAAS,SAAS;AAC1B,gBAAQ;AAAA,UACN;AAAA,QACF;AAEA,YAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UACnB,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAEA,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,QAAI;AACF,YAAM,EAAE,WAAW,IAAI,IAAI;AAE3B,UAAI,CAAC,cAAc,MAAM,UAAU,GAAG;AACpC,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,gCAAgC,CAAC;AAAA,MACtD;AAEA,YAAM,aAAa,OAAO,IAAI,KAAK,KAAK,EAAE;AAE1C,UAAI,eAAe,OAAO,UAAU,GAAG;AACrC,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,+CAA+C,CAAC;AAAA,MACrE;AAEA,YAAM,EAAE,MAAM,eAAe,IAAI,MAAM;AAAA,QACrC;AAAA,QACA,CAAC,YAAY,OAAO,UAAU,CAAC;AAAA,MACjC;AAEA,UAAI,eAAe,SAAS,GAAG;AAC7B,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,MACrD;AAEA,YAAM,0BAA0B;AAAA,QAC9B;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,YAAY,OAAO,UAAU,CAAC;AAAA,QACzC;AAAA,QACA;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,UAAU;AAAA,QACrB;AAAA,QACA;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,OAAO,UAAU,CAAC;AAAA,QAC7B;AAAA,QACA;AAAA,UACE,OACE;AAAA,UACF,QAAQ,CAAC,OAAO,UAAU,GAAG,UAAU;AAAA,QACzC;AAAA,MACF,CAAC;AAED,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,iCAAiC,CAAC;AAAA,IACpE,SAAS,OAAY;AACnB,UAAI,MAAM,SAAS,SAAS;AAC1B,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UAC1B,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AACA,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,KAAc,KAAe,MAAoB;AACtE,QAAI;AACF,YAAM,EAAE,OAAO,IAAI,IAAI;AACvB,UAAI,CAAC,UAAU,MAAM,MAAa,GAAG;AACnC,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,MACjE;AAEA,YAAM,EAAE,MAAM,UAAU,IAAI,MAAM;AAAA,QAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAuBA,CAAC,OAAO,MAAM,GAAG,IAAI,KAAK,KAAK,EAAE;AAAA,MACnC;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,SAAS;AAAA,IAChC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,EAAE,MAAM,UAAU,IAAI,MAAM;AAAA,QAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAwBA,CAAC,MAAM;AAAA,MACT;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,SAAS;AAAA,IAChC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,mBAAmB,KAAc,KAAe,MAAoB;AACxE,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAC7B,YAAM,EAAE,UAAU,OAAO,IAAI,IAAI;AAEjC,YAAM,EAAE,MAAM,gBAAgB,IAAI,MAAM;AAAA,QACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA2DA,CAAC,QAAQ,WAAW,OAAO,QAAQ,IAAI,GAAG,SAAS,OAAO,MAAM,IAAI,CAAC;AAAA,MACvE;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,gBAAgB,CAAC;AAAA,IACjD,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,iBAAiB,KAAc,KAAe,MAAoB;AACtE,QAAI;AACF,YAAM,EAAE,OAAO,IAAI,IAAI;AACvB,UAAI,CAAC,UAAU,MAAM,MAAa,GAAG;AACnC,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,CAAC;AAAA,MACjE;AAEA,YAAM,EAAE,MAAM,WAAW,IAAI,MAAM;AAAA,QACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgBA,CAAC,OAAO,MAAM,GAAG,IAAI,KAAK,KAAK,EAAE;AAAA,MACnC;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,UAAU;AAAA,IACjC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,aAAa,KAAc,KAAe,MAAoB;AAClE,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,EAAE,MAAM,WAAW,IAAI,MAAM;AAAA,QACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA,CAAC,MAAM;AAAA,MACT;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,UAAU;AAAA,IACjC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,yBACJ,KACA,KACA,MACA;AACA,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAOd,YAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;AAE9C,UAAI,KAAK,WAAW,GAAG;AACrB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UAC1B,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAEA,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,MACX,CAAC;AAAA,IACH,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,KAAc,KAAe,MAAoB;AACtE,QAAI;AACF,YAAM,SAAS,IAAI,KAAK,KAAK;AAE7B,YAAM,EAAE,MAAM,cAAc,IAAI,MAAM;AAAA,QACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAiBA,CAAC,MAAM;AAAA,MACT;AAEA,UAAI,OAAO,GAAG,EAAE,KAAK,aAAa;AAAA,IACpC,SAAS,OAAO;AACd,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AACF;AAEO,IAAM,sBAAsB,IAAI,oBAAoB;;;ADja3D,IAAMC,UAASC,QAAO;AAEtBD,QAAO,IAAI,SAAS;AACpBA,QAAO,IAAI,WAAW,aAAa,oBAAoB,UAAU,CAAC;AAClEA,QAAO,IAAI,aAAa,aAAa,oBAAoB,YAAY,CAAC;AAEtEA,QAAO,IAAI,iBAAiB,aAAa,oBAAoB,YAAY,CAAC;AAC1EA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,oBAAoB,gBAAgB;AACnD;AAEAA,QAAO,IAAI,kBAAkB,aAAa,oBAAoB,YAAY,CAAC;AAC3EA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,oBAAoB,gBAAgB;AACnD;AACAA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,oBAAoB,kBAAkB;AACrD;AACAA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,oBAAoB,gBAAgB;AACnD;AACAA,QAAO;AAAA,EACL;AAAA,EACA,aAAa,oBAAoB,wBAAwB;AAC3D;;;AtBLA,IAAM,SAAS,KAAK,EAAE,MAAM,eAAe,CAAC;AAE5C,IAAM,MAAeE,SAAQ;AAG7B,IAAI,IAAI,eAAe,IAAI;AAC3B,IAAI,IAAI,aAAa,CAAC;AAGtB,IAAI,IAAIA,SAAQ,KAAK,CAAC;AACtB,IAAI,IAAIA,SAAQ,WAAW,EAAE,UAAU,KAAK,CAAC,CAAC;AAC9C,IAAI;AAAA,EACF,KAAK;AAAA,IACH,QAAQ,CAAC,yBAAyB,qCAAqC;AAAA,IACvE,aAAa;AAAA,IACb,gBAAgB,CAAC,YAAY;AAAA,EAC/B,CAAC;AACH;AACA,IAAI,IAAI,OAAO,CAAC;AAChB,IAAI;AAAA,EACF,QAAQ;AAAA,IACN,QAAQ,IAAI;AAAA,IACZ,QAAQ;AAAA,IACR,mBAAmB;AAAA,EACrB,CAAC;AACH;AACA,IAAI,IAAIC,UAAS,WAAW,CAAC;AAC7B,IAAI,IAAIA,UAAS,QAAQ,CAAC;AAG1BA,UAAS;AAAA,EACP,IAAI;AAAA,IACF;AAAA,MACE,UAAU,IAAI;AAAA,MACd,cAAc,IAAI;AAAA,MAClB,aAAa;AAAA,IACf;AAAA,IACA,CACE,aACA,cACA,SACA,SACG;AACH,YAAM,OAAa;AAAA,QACjB,IAAI,QAAQ,GAAG,SAAS;AAAA,QACxB,UAAU,QAAQ,YAAY;AAAA,QAC9B,MAAM,QAAQ,eAAe;AAAA,QAC7B,OAAO,QAAQ,QAAQ,IAAI,CAAC,UAAe,MAAM,KAAK,EAAE,CAAC;AAAA,QACzD,QAAQ,QAAQ,SAAS,QAAQ,OAAO,CAAC,EAAE,QAAQ;AAAA,MACrD;AACA,aAAO,KAAK,MAAM,IAAI;AAAA,IACxB;AAAA,EACF;AACF;AAEAA,UAAS,cAAe,CAAC,MAAY,SAA0C;AAC7E,OAAK,MAAM,IAAI;AACjB,CAAS;AAETA,UAAS;AAAA,EACP,CAAC,MAAY,SAAiD;AAC5D,SAAK,MAAM,IAAI;AAAA,EACjB;AACF;AAGA,IAAI,IAAI,qBAAa;AAGrB,IAAI,IAAI,SAAS,MAAU;AAC3B,IAAI,IAAI,YAAYC,OAAa;AACjC,IAAI,IAAI,UAAUA,OAAU;AAC5B,IAAI,IAAI,UAAUA,OAAW;AAC7B,IAAI,IAAI,aAAaA,OAAe;AAEpC,IAAI,IAAI,aAAa;AAGrB,IAAI,IAAI,qBAAa,CAAC;AACtB,IAAI,IAAI,eAAe;;;AwBxGvB,IAAM,SAAS,IAAI,OAAO,IAAI,MAAM,MAAM;AACxC,QAAM,EAAE,UAAU,MAAM,KAAK,IAAI;AACjC,SAAO,KAAK,WAAW,QAAQ,4BAA4B,IAAI,IAAI,IAAI,EAAE;AAC3E,CAAC;AAED,IAAM,gBAAgB,MAAM;AAC1B,SAAO,KAAK,gCAAgC;AAC5C,SAAO,MAAM,MAAM;AACjB,WAAO,KAAK,eAAe;AAC3B,YAAQ,KAAK;AAAA,EACf,CAAC;AACD,aAAW,MAAM,QAAQ,KAAK,CAAC,GAAG,GAAK,EAAE,MAAM;AACjD;AAEA,QAAQ,GAAG,UAAU,aAAa;AAClC,QAAQ,GAAG,WAAW,aAAa;","names":["express","express","OpenAPIRegistry","z","StatusCodes","StatusCodes","StatusCodes","z","OpenAPIRegistry","express","StatusCodes","StatusCodes","StatusCodes","passport","Router","sign","sign","url","router","Router","Router","sanitizeHtml","router","Router","Router","router","Router","Router","router","Router","express","passport","router"]}